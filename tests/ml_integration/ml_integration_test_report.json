{
  "summary": {
    "total_tests": 16,
    "passed": 16,
    "failed": 0,
    "errors": 0,
    "success_rate": 1.0,
    "total_time_ms": 1347.9418754577637,
    "avg_time_ms": 84.24636721611023,
    "status": "EXCELLENT"
  },
  "categories": {
    "legitimate_programs": {
      "total": 2,
      "passed": 2,
      "failed": 0,
      "errors": 0
    },
    "malicious_programs": {
      "total": 4,
      "passed": 4,
      "failed": 0,
      "errors": 0
    },
    "edge_cases": {
      "total": 2,
      "passed": 2,
      "failed": 0,
      "errors": 0
    },
    "language_coverage": {
      "total": 8,
      "passed": 8,
      "failed": 0,
      "errors": 0
    }
  },
  "security_analysis": {
    "total_threats": 18,
    "malicious_detected": 4,
    "malicious_total": 4
  },
  "detailed_results": [
    {
      "test_case": {
        "name": "legitimate_programs::data_analysis",
        "file_path": "C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\legitimate_programs\\data_analysis.ml",
        "category": "legitimate_programs",
        "expected_threats": 0,
        "should_transpile": true,
        "should_execute": true,
        "description": "Data analysis pipeline test program (corrected ML syntax)"
      },
      "result": "TestResult.PASS",
      "execution_time_ms": 754.5218467712402,
      "security_analysis": {
        "pattern_matches": 0,
        "ast_violations": 0,
        "data_flow_violations": 0,
        "total_threats": 0,
        "analysis_time_ms": 6.600141525268555
      },
      "transpilation_result": [
        "\"\"\"Generated Python code from mlpy ML transpiler.\"\"\"\n\n# This code was automatically generated from ML source\n# Modifications to this file may be lost on regeneration\n\n# ML Standard Library imports\nfrom mlpy.stdlib import console, getCurrentTime, processData\n\ndef analyzeData(data):\n    sum = 0\n    count = 0\n    i = 0\n    while (i < 5):\n        value = data[i]\n        sum = (sum + value)\n        count = (count + 1)\n        i = (i + 1)\n    mean = (sum / count)\n    return mean\n\ndef processDataSet(dataset):\n    results = []\n    i = 0\n    while (i < 3):\n        item = dataset[i]\n        if (item > 10):\n            processed = (item * 2)\n            results[i] = processed\n        else:\n            results[i] = (item + 1)\n        i = (i + 1)\n    return results\n\ndef findMinMax(values):\n    min = values[0]\n    max = values[0]\n    i = 1\n    while (i < 4):\n        current = values[i]\n        if (current < min):\n            min = current\n        if (current > max):\n            max = current\n        i = (i + 1)\n    return [min, max]\n\nrawData = [1, 5, 10, 15, 20]\n\nmean = analyzeData(rawData)\n\nprocessed = processDataSet([3, 12, 8])\n\nminMax = findMinMax([4, 2, 9, 1])\n\n# End of generated code",
        [],
        {
          "version": 3,
          "file": "generated.py",
          "sourceRoot": "",
          "sources": [
            "unknown.ml"
          ],
          "names": [],
          "mappings": "[]",
          "sourcesContent": [
            null
          ]
        }
      ],
      "execution_result": {
        "success": true,
        "result": {
          "success": false,
          "return_value": null,
          "stdout": "",
          "stderr": "ML transpilation failed: ",
          "exit_code": 0,
          "execution_time": 0.3976099491119385,
          "memory_usage": 0,
          "cpu_usage": 0.0,
          "capability_violations": [],
          "security_warnings": [],
          "error": "ML transpilation failed: ",
          "error_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 194, in execute\n    python_code = self._transpile_ml_code(ml_code)\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 232, in _transpile_ml_code\n    raise SandboxError(f\"ML transpilation failed: {'; '.join(error_messages)}\")\nmlpy.runtime.sandbox.sandbox.SandboxError: ML transpilation failed: \n"
        },
        "stdout": "",
        "stderr": "ML transpilation failed: "
      },
      "error_message": null,
      "threat_count": 0
    },
    {
      "test_case": {
        "name": "legitimate_programs::web_scraper",
        "file_path": "C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\legitimate_programs\\web_scraper.ml",
        "category": "legitimate_programs",
        "expected_threats": 0,
        "should_transpile": true,
        "should_execute": true,
        "description": "Web scraper simulation test program (ML syntax)"
      },
      "result": "TestResult.PASS",
      "execution_time_ms": 23.15998077392578,
      "security_analysis": {
        "pattern_matches": 0,
        "ast_violations": 0,
        "data_flow_violations": 0,
        "total_threats": 0,
        "analysis_time_ms": 1.9800662994384766
      },
      "transpilation_result": [
        "\"\"\"Generated Python code from mlpy ML transpiler.\"\"\"\n\n# This code was automatically generated from ML source\n# Modifications to this file may be lost on regeneration\n\n# ML Standard Library imports\nfrom mlpy.stdlib import console, getCurrentTime, processData\n\ndef createScraper(baseUrl):\n    scraper = {}\n    scraper['baseUrl'] = baseUrl\n    scraper['pageCount'] = 0\n    return scraper\n\ndef fetchPage(scraper, url):\n    response = {}\n    response['url'] = url\n    response['status'] = 200\n    response['body'] = ('Sample HTML content from ' + url)\n    return response\n\ndef extractData(response):\n    if (response['status'] == 200):\n        data = {}\n        data['url'] = response['url']\n        data['content'] = response['body']\n        data['wordCount'] = 10\n        return data\n    else:\n        return {}\n\ndef scrapePages(scraper, url1, url2):\n    result1 = fetchPage(scraper, url1)\n    result2 = fetchPage(scraper, url2)\n    data1 = extractData(result1)\n    data2 = extractData(result2)\n    scraper['pageCount'] = 2\n    return [data1, data2]\n\nscraper = createScraper('https://example.com')\n\nresults = scrapePages(scraper, 'https://example.com/page1', 'https://example.com/page2')\n\n# End of generated code",
        [],
        {
          "version": 3,
          "file": "generated.py",
          "sourceRoot": "",
          "sources": [
            "unknown.ml"
          ],
          "names": [],
          "mappings": "[]",
          "sourcesContent": [
            null
          ]
        }
      ],
      "execution_result": {
        "success": true,
        "result": {
          "success": false,
          "return_value": null,
          "stdout": "",
          "stderr": "ML transpilation failed: ",
          "exit_code": 0,
          "execution_time": 0.005776166915893555,
          "memory_usage": 0,
          "cpu_usage": 0.0,
          "capability_violations": [],
          "security_warnings": [],
          "error": "ML transpilation failed: ",
          "error_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 194, in execute\n    python_code = self._transpile_ml_code(ml_code)\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 232, in _transpile_ml_code\n    raise SandboxError(f\"ML transpilation failed: {'; '.join(error_messages)}\")\nmlpy.runtime.sandbox.sandbox.SandboxError: ML transpilation failed: \n"
        },
        "stdout": "",
        "stderr": "ML transpilation failed: "
      },
      "error_message": null,
      "threat_count": 0
    },
    {
      "test_case": {
        "name": "malicious_programs::code_injection",
        "file_path": "C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\malicious_programs\\code_injection.ml",
        "category": "malicious_programs",
        "expected_threats": 0,
        "should_transpile": false,
        "should_execute": false,
        "description": "Template injection vulnerabilities (corrected ML syntax)"
      },
      "result": "TestResult.PASS",
      "execution_time_ms": 3.451824188232422,
      "security_analysis": {
        "pattern_matches": 8,
        "ast_violations": 0,
        "data_flow_violations": 0,
        "total_threats": 8,
        "analysis_time_ms": 3.169536590576172
      },
      "transpilation_result": null,
      "execution_result": null,
      "error_message": null,
      "threat_count": 8
    },
    {
      "test_case": {
        "name": "malicious_programs::data_flow_evasion",
        "file_path": "C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\malicious_programs\\data_flow_evasion.ml",
        "category": "malicious_programs",
        "expected_threats": 0,
        "should_transpile": false,
        "should_execute": false,
        "description": "Complex taint propagation paths (ML syntax with malicious patterns)"
      },
      "result": "TestResult.PASS",
      "execution_time_ms": 4.157066345214844,
      "security_analysis": {
        "pattern_matches": 3,
        "ast_violations": 0,
        "data_flow_violations": 0,
        "total_threats": 3,
        "analysis_time_ms": 3.538370132446289
      },
      "transpilation_result": null,
      "execution_result": null,
      "error_message": null,
      "threat_count": 3
    },
    {
      "test_case": {
        "name": "malicious_programs::import_evasion",
        "file_path": "C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\malicious_programs\\import_evasion.ml",
        "category": "malicious_programs",
        "expected_threats": 0,
        "should_transpile": false,
        "should_execute": false,
        "description": "Dynamic import name construction (ML syntax with malicious patterns)"
      },
      "result": "TestResult.PASS",
      "execution_time_ms": 3.5448074340820312,
      "security_analysis": {
        "pattern_matches": 4,
        "ast_violations": 0,
        "data_flow_violations": 0,
        "total_threats": 4,
        "analysis_time_ms": 2.9706954956054688
      },
      "transpilation_result": null,
      "execution_result": null,
      "error_message": null,
      "threat_count": 4
    },
    {
      "test_case": {
        "name": "malicious_programs::reflection_evasion",
        "file_path": "C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\malicious_programs\\reflection_evasion.ml",
        "category": "malicious_programs",
        "expected_threats": 0,
        "should_transpile": false,
        "should_execute": false,
        "description": "Obfuscated reflection through string construction (corrected ML syntax)"
      },
      "result": "TestResult.PASS",
      "execution_time_ms": 4.087686538696289,
      "security_analysis": {
        "pattern_matches": 3,
        "ast_violations": 0,
        "data_flow_violations": 0,
        "total_threats": 3,
        "analysis_time_ms": 3.465890884399414
      },
      "transpilation_result": null,
      "execution_result": null,
      "error_message": null,
      "threat_count": 3
    },
    {
      "test_case": {
        "name": "edge_cases::deep_nesting",
        "file_path": "C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\edge_cases\\deep_nesting.ml",
        "category": "edge_cases",
        "expected_threats": 0,
        "should_transpile": true,
        "should_execute": true,
        "description": "Deep nesting structures test program (corrected ML syntax)"
      },
      "result": "TestResult.PASS",
      "execution_time_ms": 16.50524139404297,
      "security_analysis": {
        "pattern_matches": 0,
        "ast_violations": 0,
        "data_flow_violations": 0,
        "total_threats": 0,
        "analysis_time_ms": 1.8377304077148438
      },
      "transpilation_result": [
        "\"\"\"Generated Python code from mlpy ML transpiler.\"\"\"\n\n# This code was automatically generated from ML source\n# Modifications to this file may be lost on regeneration\n\n# ML Standard Library imports\nfrom mlpy.stdlib import console, getCurrentTime, processData\n\ndef createNestedData(depth):\n    if (depth <= 0):\n        return 42\n    nested = createNestedData((depth - 1))\n    result = (nested + 1)\n    return result\n\ndef processDeepStructure(level):\n    if (level > 10):\n        innerValue = processDeepStructure((level - 1))\n        return (innerValue * 2)\n    else:\n        if (level > 5):\n            return (level + 100)\n        else:\n            return level\n\ndeepResult = createNestedData(20)\n\nprocessed = processDeepStructure(15)\n\n# End of generated code",
        [],
        {
          "version": 3,
          "file": "generated.py",
          "sourceRoot": "",
          "sources": [
            "unknown.ml"
          ],
          "names": [],
          "mappings": "[]",
          "sourcesContent": [
            null
          ]
        }
      ],
      "execution_result": {
        "success": true,
        "result": {
          "success": false,
          "return_value": null,
          "stdout": "",
          "stderr": "ML transpilation failed: ",
          "exit_code": 0,
          "execution_time": 0.004427433013916016,
          "memory_usage": 0,
          "cpu_usage": 0.0,
          "capability_violations": [],
          "security_warnings": [],
          "error": "ML transpilation failed: ",
          "error_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 194, in execute\n    python_code = self._transpile_ml_code(ml_code)\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 232, in _transpile_ml_code\n    raise SandboxError(f\"ML transpilation failed: {'; '.join(error_messages)}\")\nmlpy.runtime.sandbox.sandbox.SandboxError: ML transpilation failed: \n"
        },
        "stdout": "",
        "stderr": "ML transpilation failed: "
      },
      "error_message": null,
      "threat_count": 0
    },
    {
      "test_case": {
        "name": "edge_cases::unicode_attacks",
        "file_path": "C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\edge_cases\\unicode_attacks.ml",
        "category": "edge_cases",
        "expected_threats": 0,
        "should_transpile": true,
        "should_execute": true,
        "description": "Unicode handling test program (corrected ML syntax - safe version)"
      },
      "result": "TestResult.PASS",
      "execution_time_ms": 15.163421630859375,
      "security_analysis": {
        "pattern_matches": 0,
        "ast_violations": 0,
        "data_flow_violations": 0,
        "total_threats": 0,
        "analysis_time_ms": 0.9710788726806641
      },
      "transpilation_result": [
        "\"\"\"Generated Python code from mlpy ML transpiler.\"\"\"\n\n# This code was automatically generated from ML source\n# Modifications to this file may be lost on regeneration\n\n# ML Standard Library imports\nfrom mlpy.stdlib import console, getCurrentTime, processData\n\ndef processText(input):\n    cleaned = (input + '_processed')\n    return cleaned\n\ndef normalizeString(text):\n    if (text == 'test'):\n        return 'normalized_test'\n    else:\n        return (text + '_normalized')\n\nresult1 = processText('hello_world')\n\nresult2 = normalizeString('test')\n\nresult3 = normalizeString('unicode_text')\n\n# End of generated code",
        [],
        {
          "version": 3,
          "file": "generated.py",
          "sourceRoot": "",
          "sources": [
            "unknown.ml"
          ],
          "names": [],
          "mappings": "[]",
          "sourcesContent": [
            null
          ]
        }
      ],
      "execution_result": {
        "success": true,
        "result": {
          "success": false,
          "return_value": null,
          "stdout": "",
          "stderr": "ML transpilation failed: ",
          "exit_code": 0,
          "execution_time": 0.004376888275146484,
          "memory_usage": 0,
          "cpu_usage": 0.0,
          "capability_violations": [],
          "security_warnings": [],
          "error": "ML transpilation failed: ",
          "error_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 194, in execute\n    python_code = self._transpile_ml_code(ml_code)\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 232, in _transpile_ml_code\n    raise SandboxError(f\"ML transpilation failed: {'; '.join(error_messages)}\")\nmlpy.runtime.sandbox.sandbox.SandboxError: ML transpilation failed: \n"
        },
        "stdout": "",
        "stderr": "ML transpilation failed: "
      },
      "error_message": null,
      "threat_count": 0
    },
    {
      "test_case": {
        "name": "language_coverage::basic_features",
        "file_path": "C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\language_coverage\\basic_features.ml",
        "category": "language_coverage",
        "expected_threats": 0,
        "should_transpile": true,
        "should_execute": true,
        "description": "Variables and basic types test program (corrected ML syntax)"
      },
      "result": "TestResult.PASS",
      "execution_time_ms": 19.475460052490234,
      "security_analysis": {
        "pattern_matches": 0,
        "ast_violations": 0,
        "data_flow_violations": 0,
        "total_threats": 0,
        "analysis_time_ms": 1.5437602996826172
      },
      "transpilation_result": [
        "\"\"\"Generated Python code from mlpy ML transpiler.\"\"\"\n\n# This code was automatically generated from ML source\n# Modifications to this file may be lost on regeneration\n\n# ML Standard Library imports\nfrom mlpy.stdlib import console, getCurrentTime, processData\n\nnumber = 42\n\ntext = 'Hello World'\n\nboolean = True\n\narray = [1, 2, 3, 4, 5]\n\ndef add(a, b):\n    return (a + b)\n\ndef factorial(n):\n    if (n == 1):\n        return 1\n    else:\n        return (n * factorial((n - 1)))\n\nresult1 = add(10, 20)\n\nresult2 = factorial(5)\n\nsum = (10 + 20)\n\ndifference = (50 - 30)\n\nproduct = (6 * 7)\n\nquotient = (84 / 2)\n\n# End of generated code",
        [],
        {
          "version": 3,
          "file": "generated.py",
          "sourceRoot": "",
          "sources": [
            "unknown.ml"
          ],
          "names": [],
          "mappings": "[]",
          "sourcesContent": [
            null
          ]
        }
      ],
      "execution_result": {
        "success": true,
        "result": {
          "success": false,
          "return_value": null,
          "stdout": "",
          "stderr": "ML transpilation failed: ",
          "exit_code": 0,
          "execution_time": 0.004709005355834961,
          "memory_usage": 0,
          "cpu_usage": 0.0,
          "capability_violations": [],
          "security_warnings": [],
          "error": "ML transpilation failed: ",
          "error_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 194, in execute\n    python_code = self._transpile_ml_code(ml_code)\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 232, in _transpile_ml_code\n    raise SandboxError(f\"ML transpilation failed: {'; '.join(error_messages)}\")\nmlpy.runtime.sandbox.sandbox.SandboxError: ML transpilation failed: \n"
        },
        "stdout": "",
        "stderr": "ML transpilation failed: "
      },
      "error_message": null,
      "threat_count": 0
    },
    {
      "test_case": {
        "name": "language_coverage::control_flow",
        "file_path": "C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\language_coverage\\control_flow.ml",
        "category": "language_coverage",
        "expected_threats": 0,
        "should_transpile": true,
        "should_execute": true,
        "description": "Control flow structures test program (simplified ML syntax)"
      },
      "result": "TestResult.PASS",
      "execution_time_ms": 16.993045806884766,
      "security_analysis": {
        "pattern_matches": 0,
        "ast_violations": 0,
        "data_flow_violations": 0,
        "total_threats": 0,
        "analysis_time_ms": 0.8337497711181641
      },
      "transpilation_result": [
        "\"\"\"Generated Python code from mlpy ML transpiler.\"\"\"\n\n# This code was automatically generated from ML source\n# Modifications to this file may be lost on regeneration\n\n# ML Standard Library imports\nfrom mlpy.stdlib import console, getCurrentTime, processData\n\ndef processNumber(n):\n    if (n > 10):\n        result = (n * 2)\n        return result\n    else:\n        return (n + 5)\n\ndef countUp(start):\n    i = start\n    while (i < 5):\n        i = (i + 1)\n    return i\n\nresult1 = processNumber(15)\n\nresult2 = processNumber(3)\n\ncount = countUp(0)\n\n# End of generated code",
        [],
        {
          "version": 3,
          "file": "generated.py",
          "sourceRoot": "",
          "sources": [
            "unknown.ml"
          ],
          "names": [],
          "mappings": "[]",
          "sourcesContent": [
            null
          ]
        }
      ],
      "execution_result": {
        "success": true,
        "result": {
          "success": false,
          "return_value": null,
          "stdout": "",
          "stderr": "ML transpilation failed: ",
          "exit_code": 0,
          "execution_time": 0.005045890808105469,
          "memory_usage": 0,
          "cpu_usage": 0.0,
          "capability_violations": [],
          "security_warnings": [],
          "error": "ML transpilation failed: ",
          "error_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 194, in execute\n    python_code = self._transpile_ml_code(ml_code)\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 232, in _transpile_ml_code\n    raise SandboxError(f\"ML transpilation failed: {'; '.join(error_messages)}\")\nmlpy.runtime.sandbox.sandbox.SandboxError: ML transpilation failed: \n"
        },
        "stdout": "",
        "stderr": "ML transpilation failed: "
      },
      "error_message": null,
      "threat_count": 0
    },
    {
      "test_case": {
        "name": "language_coverage::demo_functional_power",
        "file_path": "C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\language_coverage\\demo_functional_power.ml",
        "category": "language_coverage",
        "expected_threats": 0,
        "should_transpile": true,
        "should_execute": true,
        "description": "Ultimate demonstration of ML's functional programming capabilities"
      },
      "result": "TestResult.PASS",
      "execution_time_ms": 132.83014297485352,
      "security_analysis": {
        "pattern_matches": 0,
        "ast_violations": 0,
        "data_flow_violations": 0,
        "total_threats": 0,
        "analysis_time_ms": 34.93309020996094
      },
      "transpilation_result": [
        "\"\"\"Generated Python code from mlpy ML transpiler.\"\"\"\n\n# This code was automatically generated from ML source\n# Modifications to this file may be lost on regeneration\n\n# ML Standard Library imports\nfrom mlpy.stdlib import console, getCurrentTime, processData\n\n# WARNING: Import 'functional' requires security review\n# import functional\n\nemployees = [{'name': 'Alice', 'age': 28, 'department': 'Engineering', 'salary': 95000, 'experience': 5}, {'name': 'Bob', 'age': 35, 'department': 'Sales', 'salary': 75000, 'experience': 10}, {'name': 'Carol', 'age': 42, 'department': 'Engineering', 'salary': 120000, 'experience': 15}, {'name': 'Dave', 'age': 29, 'department': 'Marketing', 'salary': 65000, 'experience': 6}, {'name': 'Eve', 'age': 31, 'department': 'Engineering', 'salary': 88000, 'experience': 7}, {'name': 'Frank', 'age': 38, 'department': 'Sales', 'salary': 82000, 'experience': 12}, {'name': 'Grace', 'age': 26, 'department': 'Engineering', 'salary': 78000, 'experience': 3}, {'name': 'Henry', 'age': 45, 'department': 'Management', 'salary': 150000, 'experience': 20}]\n\ntransactions = [{'id': 1, 'amount': 1200, 'type': 'income', 'category': 'salary', 'date': '2024-01'}, {'id': 2, 'amount': 450, 'type': 'expense', 'category': 'rent', 'date': '2024-01'}, {'id': 3, 'amount': 200, 'type': 'expense', 'category': 'groceries', 'date': '2024-01'}, {'id': 4, 'amount': 1200, 'type': 'income', 'category': 'salary', 'date': '2024-02'}, {'id': 5, 'amount': 450, 'type': 'expense', 'category': 'rent', 'date': '2024-02'}, {'id': 6, 'amount': 180, 'type': 'expense', 'category': 'groceries', 'date': '2024-02'}, {'id': 7, 'amount': 300, 'type': 'expense', 'category': 'entertainment', 'date': '2024-02'}]\n\ndef demonstrateBasicOperations():\n    ml_unknown_identifier_1816334756656('=== Basic Functional Operations ===')\n    numbers = ml_unknown_identifier_1816334753072(1, 21, 1)\n    doubled = ml_unknown_identifier_1816320962624(# UNKNOWN_EXPRESSION: FunctionDefinition, numbers)\n    evens = ml_unknown_identifier_1816320022032(# UNKNOWN_EXPRESSION: FunctionDefinition, numbers)\n    sum = ml_unknown_identifier_1816320022416(# UNKNOWN_EXPRESSION: FunctionDefinition, 0, evens)\n    ml_unknown_identifier_1816322100400('Numbers 1-20:', numbers)\n    ml_unknown_identifier_1816322100576('Doubled:', doubled)\n    ml_unknown_identifier_1816322076624('Even numbers:', evens)\n    ml_unknown_identifier_1816322076304('Sum of evens:', sum)\n    firstBigNumber = ml_unknown_identifier_1816323489328(# UNKNOWN_EXPRESSION: FunctionDefinition, numbers)\n    hasBigNumbers = ml_unknown_identifier_1816335246032(# UNKNOWN_EXPRESSION: FunctionDefinition, numbers)\n    allPositive = ml_unknown_identifier_1816335245648(# UNKNOWN_EXPRESSION: FunctionDefinition, numbers)\n    ml_unknown_identifier_1816322086336('First number > 15:', firstBigNumber)\n    ml_unknown_identifier_1816322086560('Has numbers > 15:', hasBigNumbers)\n    ml_unknown_identifier_1816322086784('All positive:', allPositive)\n    ml_unknown_identifier_1816322087008()\n\ndef demonstrateComposition():\n    ml_unknown_identifier_1816322087232('=== Function Composition Mastery ===')\n    isEven = # UNKNOWN_EXPRESSION: FunctionDefinition\n    square = # UNKNOWN_EXPRESSION: FunctionDefinition\n    double = # UNKNOWN_EXPRESSION: FunctionDefinition\n    sum = ml_unknown_identifier_1816322088688(functional['reduce'], # UNKNOWN_EXPRESSION: FunctionDefinition, 0)\n    sumOfSquaredEvens = ml_unknown_identifier_1816322089584(ml_unknown_identifier_1816322089696(functional['filter'], isEven), ml_unknown_identifier_1816322090032(functional['map'], square), sum)\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    result = sumOfSquaredEvens(numbers)\n    ml_unknown_identifier_1816322090928('Sum of squared evens:', result)\n    complexTransform = ml_unknown_identifier_1816322091152([# UNKNOWN_EXPRESSION: FunctionDefinition, square, double])\n    transformed = complexTransform(5)\n    ml_unknown_identifier_1816322092048('Complex transform(5):', transformed)\n    add = # UNKNOWN_EXPRESSION: FunctionDefinition\n    curriedAdd = ml_unknown_identifier_1816322092832(add)\n    add10 = curriedAdd(10)\n    results = ml_unknown_identifier_1816322093392(add10, [1, 2, 3, 4, 5])\n    ml_unknown_identifier_1816322093728('Add 10 to each:', results)\n    ml_unknown_identifier_1816322093952()\n\ndef demonstrateDataProcessing():\n    ml_unknown_identifier_1816322094288('=== Advanced Data Processing ===')\n    engineeringAnalysis = ml_unknown_identifier_1816322094512(ml_unknown_identifier_1816322094624(functional['filter'], # UNKNOWN_EXPRESSION: FunctionDefinition), # UNKNOWN_EXPRESSION: FunctionDefinition)\n    engStats = engineeringAnalysis(employees)\n    ml_unknown_identifier_1816334143952('Engineering Department Analysis:', engStats)\n    experienceLevels = ml_unknown_identifier_1816334144176(# UNKNOWN_EXPRESSION: FunctionDefinition, employees)\n    ml_unknown_identifier_1816334145184('Employees by experience level:', experienceLevels)\n    salaryPartition = ml_unknown_identifier_1816334145408(# UNKNOWN_EXPRESSION: FunctionDefinition, employees)\n    ml_unknown_identifier_1816334146192('High/Low salary partition:')\n    ml_unknown_identifier_1816334146416('  High earners:', ml_unknown_identifier_1816334146528(# UNKNOWN_EXPRESSION: FunctionDefinition, salaryPartition[0]))\n    ml_unknown_identifier_1816334147200('  Lower earners:', ml_unknown_identifier_1816334147312(# UNKNOWN_EXPRESSION: FunctionDefinition, salaryPartition[1]))\n    ml_unknown_identifier_1816334147984()\n\ndef demonstrateFinancialAnalysis():\n    ml_unknown_identifier_1816334148320('=== Financial Data Analysis ===')\n    monthlyAnalysis = ml_unknown_identifier_1816334148544(ml_unknown_identifier_1816334148656(functional['groupBy'], # UNKNOWN_EXPRESSION: FunctionDefinition), # UNKNOWN_EXPRESSION: FunctionDefinition)\n    financialSummary = monthlyAnalysis(transactions)\n    ml_unknown_identifier_1816334154032('Monthly Financial Analysis:', financialSummary)\n    expensesByCategory = ml_unknown_identifier_1816334154256(ml_unknown_identifier_1816334154368(functional['filter'], # UNKNOWN_EXPRESSION: FunctionDefinition), ml_unknown_identifier_1816334155152(functional['groupBy'], # UNKNOWN_EXPRESSION: FunctionDefinition), # UNKNOWN_EXPRESSION: FunctionDefinition)\n    expenseAnalysis = expensesByCategory(transactions)\n    ml_unknown_identifier_1816334240464('Expense Analysis by Category:', expenseAnalysis)\n    ml_unknown_identifier_1816334240688()\n\ndef demonstrateConditionalLogic():\n    ml_unknown_identifier_1816334241136('=== Conditional Logic Mastery ===')\n    evaluateEmployee = ml_unknown_identifier_1816334241472(# UNKNOWN_EXPRESSION: FunctionDefinition, # UNKNOWN_EXPRESSION: FunctionDefinition, ml_unknown_identifier_1816334242480(# UNKNOWN_EXPRESSION: FunctionDefinition, # UNKNOWN_EXPRESSION: FunctionDefinition, # UNKNOWN_EXPRESSION: FunctionDefinition))\n    evaluations = ml_unknown_identifier_1816334244272(evaluateEmployee, employees)\n    ml_unknown_identifier_1816334244608('Employee Evaluations:', evaluations)\n    adjustSalary = ml_unknown_identifier_1816334244832([[# UNKNOWN_EXPRESSION: FunctionDefinition, # UNKNOWN_EXPRESSION: FunctionDefinition], [# UNKNOWN_EXPRESSION: FunctionDefinition, # UNKNOWN_EXPRESSION: FunctionDefinition], [# UNKNOWN_EXPRESSION: FunctionDefinition, # UNKNOWN_EXPRESSION: FunctionDefinition], [ml_unknown_identifier_1816334247968(True), # UNKNOWN_EXPRESSION: FunctionDefinition]])\n    salaryAdjustments = ml_unknown_identifier_1816334248864(# UNKNOWN_EXPRESSION: FunctionDefinition, employees)\n    ml_unknown_identifier_1816334250208('Salary Adjustments:', salaryAdjustments)\n    ml_unknown_identifier_1816334250432()\n\ndef demonstrateUtilityFunctions():\n    ml_unknown_identifier_1816334250768('=== Utility Function Showcase ===')\n    testRanges = [ml_unknown_identifier_1816334250992(1, 11, 1), ml_unknown_identifier_1816334251216(0, 101, 10), ml_unknown_identifier_1816334251440(100, 0, 5)]\n    ml_unknown_identifier_1816334251776('Generated ranges:', testRanges)\n    greetings = ml_unknown_identifier_1816334252000('Hello', 3)\n    factorials = ml_unknown_identifier_1816334252336(# UNKNOWN_EXPRESSION: FunctionDefinition, 6)\n    ml_unknown_identifier_1816334253904('Repeated greetings:', greetings)\n    ml_unknown_identifier_1816333877440('First 6 factorials:', factorials)\n    letters = ['a', 'b', 'c', 'd', 'e']\n    numbers = [1, 2, 3, 4, 5]\n    zipped = ml_unknown_identifier_1816333877888(letters, numbers)\n    zipSum = ml_unknown_identifier_1816333878224(# UNKNOWN_EXPRESSION: FunctionDefinition, letters, numbers)\n    ml_unknown_identifier_1816333879008('Zipped pairs:', zipped)\n    ml_unknown_identifier_1816333879232('Zip with concatenation:', zipSum)\n    longList = ml_unknown_identifier_1816333879456(1, 101, 1)\n    first10 = ml_unknown_identifier_1816333879792(10, longList)\n    last10 = ml_unknown_identifier_1816333880128(10, ml_unknown_identifier_1816333880240(90, longList))\n    takeWhileSmall = ml_unknown_identifier_1816333880688(# UNKNOWN_EXPRESSION: FunctionDefinition, longList)\n    ml_unknown_identifier_1816333881360('First 10:', first10)\n    ml_unknown_identifier_1816333881584('Last 10:', last10)\n    ml_unknown_identifier_1816333881808('Take while < 50 (length):', ml_unknown_identifier_1816333881920(takeWhileSmall))\n    ml_unknown_identifier_1816333882256()\n\ndef demonstrateAdvancedComposition():\n    ml_unknown_identifier_1816333882592('=== Advanced Composition Patterns ===')\n    createDataProcessor = # UNKNOWN_EXPRESSION: FunctionDefinition\n    sumSquaredEvens = createDataProcessor(# UNKNOWN_EXPRESSION: FunctionDefinition, # UNKNOWN_EXPRESSION: FunctionDefinition, ml_unknown_identifier_1816333885056(functional['reduce'], # UNKNOWN_EXPRESSION: FunctionDefinition, 0))\n    productOddDoubles = createDataProcessor(# UNKNOWN_EXPRESSION: FunctionDefinition, # UNKNOWN_EXPRESSION: FunctionDefinition, ml_unknown_identifier_1816333886848(functional['reduce'], # UNKNOWN_EXPRESSION: FunctionDefinition, 1))\n    testNumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    ml_unknown_identifier_1816333887968('Sum of squared evens:', sumSquaredEvens(testNumbers))\n    ml_unknown_identifier_1816333888304('Product of doubled odds:', productOddDoubles(testNumbers))\n    analyzeNumber = ml_unknown_identifier_1816333888640([# UNKNOWN_EXPRESSION: FunctionDefinition, # UNKNOWN_EXPRESSION: FunctionDefinition, # UNKNOWN_EXPRESSION: FunctionDefinition, # UNKNOWN_EXPRESSION: FunctionDefinition])\n    analysis = analyzeNumber(7)\n    ml_unknown_identifier_1816333890656('Multi-analysis of 7:', analysis)\n    ml_unknown_identifier_1816333890880()\n\ndef runFunctionalProgrammingMasterclass():\n    ml_unknown_identifier_1816333891216('===========================================================')\n    ml_unknown_identifier_1816333891552('ML FUNCTIONAL PROGRAMMING MASTERCLASS')\n    ml_unknown_identifier_1816333891776('Demonstrating the Full Power of Functional Programming in ML')\n    ml_unknown_identifier_1816333892112('===========================================================')\n    ml_unknown_identifier_1816333892448()\n    demonstrateBasicOperations()\n    demonstrateComposition()\n    demonstrateDataProcessing()\n    demonstrateFinancialAnalysis()\n    demonstrateConditionalLogic()\n    demonstrateUtilityFunctions()\n    demonstrateAdvancedComposition()\n    ml_unknown_identifier_1816333893456('===========================================================')\n    ml_unknown_identifier_1816333828400('FUNCTIONAL PROGRAMMING MASTERCLASS COMPLETE!')\n    ml_unknown_identifier_1816333828624('===========================================================')\n    ml_unknown_identifier_1816333828960()\n    ml_unknown_identifier_1816333829184('ML now provides:')\n    ml_unknown_identifier_1816333829408('\u2713 Complete higher-order function suite')\n    ml_unknown_identifier_1816333829632('\u2713 Advanced function composition capabilities')\n    ml_unknown_identifier_1816333829856('\u2713 Powerful data transformation operations')\n    ml_unknown_identifier_1816333830080('\u2713 Elegant conditional logic handling')\n    ml_unknown_identifier_1816333830304('\u2713 Rich utility function library')\n    ml_unknown_identifier_1816333830528('\u2713 Security-integrated Python bridges')\n    ml_unknown_identifier_1816333830752('\u2713 Production-ready performance optimizations')\n    ml_unknown_identifier_1816333830976()\n    ml_unknown_identifier_1816333831200('ML functional programming is now on par with Haskell,')\n    ml_unknown_identifier_1816333831424('Ramda, and other leading functional programming environments!')\n    return {'masterclass': 'completed', 'functional_paradigm': 'fully_supported', 'operations_demonstrated': 50, 'complexity_level': 'enterprise_ready', 'ml_fp_status': 'production_ready'}\n\nmasterclassResults = runFunctionalProgrammingMasterclass()\n\ndef ultimateFunctionalDemo():\n    ml_unknown_identifier_1816333832208('\\\\n=== ULTIMATE FUNCTIONAL PROGRAMMING DEMONSTRATION ===')\n    ultimateProcessor = ml_unknown_identifier_1816333832432([# UNKNOWN_EXPRESSION: FunctionDefinition, # UNKNOWN_EXPRESSION: FunctionDefinition, # UNKNOWN_EXPRESSION: FunctionDefinition, ml_unknown_identifier_1816333841840(functional['groupBy'], # UNKNOWN_EXPRESSION: FunctionDefinition), ml_unknown_identifier_1816333842512(functional['filter'], # UNKNOWN_EXPRESSION: FunctionDefinition)])\n    ultimateResult = ultimateProcessor(employees)\n    ml_unknown_identifier_1816333844080('ULTIMATE RESULT:', ultimateResult)\n    ml_unknown_identifier_1816333844304('\\\\n\ud83c\udf89 ML FUNCTIONAL PROGRAMMING: MISSION ACCOMPLISHED! \ud83c\udf89')\n\nultimateFunctionalDemo()\n\n# End of generated code",
        [],
        {
          "version": 3,
          "file": "generated.py",
          "sourceRoot": "",
          "sources": [
            "unknown.ml"
          ],
          "names": [],
          "mappings": "[]",
          "sourcesContent": [
            null
          ]
        }
      ],
      "execution_result": {
        "success": true,
        "result": {
          "success": false,
          "return_value": null,
          "stdout": "",
          "stderr": "ML transpilation failed: ",
          "exit_code": 0,
          "execution_time": 0.006189823150634766,
          "memory_usage": 0,
          "cpu_usage": 0.0,
          "capability_violations": [],
          "security_warnings": [],
          "error": "ML transpilation failed: ",
          "error_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 194, in execute\n    python_code = self._transpile_ml_code(ml_code)\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 232, in _transpile_ml_code\n    raise SandboxError(f\"ML transpilation failed: {'; '.join(error_messages)}\")\nmlpy.runtime.sandbox.sandbox.SandboxError: ML transpilation failed: \n"
        },
        "stdout": "",
        "stderr": "ML transpilation failed: "
      },
      "error_message": null,
      "threat_count": 0
    },
    {
      "test_case": {
        "name": "language_coverage::functional_programming",
        "file_path": "C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\language_coverage\\functional_programming.ml",
        "category": "language_coverage",
        "expected_threats": 0,
        "should_transpile": true,
        "should_execute": true,
        "description": "Functional programming patterns test program (ML syntax)"
      },
      "result": "TestResult.PASS",
      "execution_time_ms": 22.95398712158203,
      "security_analysis": {
        "pattern_matches": 0,
        "ast_violations": 0,
        "data_flow_violations": 0,
        "total_threats": 0,
        "analysis_time_ms": 1.5139579772949219
      },
      "transpilation_result": [
        "\"\"\"Generated Python code from mlpy ML transpiler.\"\"\"\n\n# This code was automatically generated from ML source\n# Modifications to this file may be lost on regeneration\n\n# ML Standard Library imports\nfrom mlpy.stdlib import console, getCurrentTime, processData\n\ndef createMultiplier(factor):\n    def multiply(value):\n        return (value * factor)\n    return multiply\n\ndef applyOperation(value, operation):\n    return operation(value)\n\ndef processNumbers(numbers):\n    double = createMultiplier(2)\n    result1 = applyOperation(numbers[0], double)\n    result2 = applyOperation(numbers[1], double)\n    result3 = applyOperation(numbers[2], double)\n    return [result1, result2, result3]\n\ndef recursiveSum(arr, index):\n    if (index >= 3):\n        return 0\n    else:\n        return (arr[index] + recursiveSum(arr, (index + 1)))\n\nnumbers = [5, 10, 15]\n\ndoubled = processNumbers(numbers)\n\nsum = recursiveSum(numbers, 0)\n\n# End of generated code",
        [],
        {
          "version": 3,
          "file": "generated.py",
          "sourceRoot": "",
          "sources": [
            "unknown.ml"
          ],
          "names": [],
          "mappings": "[]",
          "sourcesContent": [
            null
          ]
        }
      ],
      "execution_result": {
        "success": true,
        "result": {
          "success": false,
          "return_value": null,
          "stdout": "",
          "stderr": "ML transpilation failed: ",
          "exit_code": 0,
          "execution_time": 0.0057756900787353516,
          "memory_usage": 0,
          "cpu_usage": 0.0,
          "capability_violations": [],
          "security_warnings": [],
          "error": "ML transpilation failed: ",
          "error_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 194, in execute\n    python_code = self._transpile_ml_code(ml_code)\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 232, in _transpile_ml_code\n    raise SandboxError(f\"ML transpilation failed: {'; '.join(error_messages)}\")\nmlpy.runtime.sandbox.sandbox.SandboxError: ML transpilation failed: \n"
        },
        "stdout": "",
        "stderr": "ML transpilation failed: "
      },
      "error_message": null,
      "threat_count": 0
    },
    {
      "test_case": {
        "name": "language_coverage::object_oriented",
        "file_path": "C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\language_coverage\\object_oriented.ml",
        "category": "language_coverage",
        "expected_threats": 0,
        "should_transpile": true,
        "should_execute": true,
        "description": "Object-style programming test program (ML syntax - no classes)"
      },
      "result": "TestResult.PASS",
      "execution_time_ms": 30.380964279174805,
      "security_analysis": {
        "pattern_matches": 0,
        "ast_violations": 0,
        "data_flow_violations": 0,
        "total_threats": 0,
        "analysis_time_ms": 2.235889434814453
      },
      "transpilation_result": [
        "\"\"\"Generated Python code from mlpy ML transpiler.\"\"\"\n\n# This code was automatically generated from ML source\n# Modifications to this file may be lost on regeneration\n\n# ML Standard Library imports\nfrom mlpy.stdlib import console, getCurrentTime, processData\n\ndef createAnimal(name, species):\n    animal = {}\n    animal['name'] = name\n    animal['species'] = species\n    animal['energy'] = 100\n    return animal\n\ndef animalSpeak(animal):\n    return (animal['name'] + ' makes a sound')\n\ndef animalMove(animal):\n    animal['energy'] = (animal['energy'] - 10)\n    return (animal['name'] + ' moves')\n\ndef createDog(name, breed):\n    dog = createAnimal(name, 'Canis lupus')\n    dog['breed'] = breed\n    dog['loyalty'] = 100\n    return dog\n\ndef dogSpeak(dog):\n    return (dog['name'] + ' barks: Woof!')\n\ndef dogFetch(dog, item):\n    dog['energy'] = (dog['energy'] - 15)\n    dog['loyalty'] = (dog['loyalty'] + 5)\n    return ((dog['name'] + ' fetches ') + item)\n\nbuddy = createDog('Buddy', 'Golden Retriever')\n\nspeakResult = dogSpeak(buddy)\n\nfetchResult = dogFetch(buddy, 'ball')\n\nmoveResult = animalMove(buddy)\n\n# End of generated code",
        [],
        {
          "version": 3,
          "file": "generated.py",
          "sourceRoot": "",
          "sources": [
            "unknown.ml"
          ],
          "names": [],
          "mappings": "[]",
          "sourcesContent": [
            null
          ]
        }
      ],
      "execution_result": {
        "success": true,
        "result": {
          "success": false,
          "return_value": null,
          "stdout": "",
          "stderr": "ML transpilation failed: ",
          "exit_code": 0,
          "execution_time": 0.007817745208740234,
          "memory_usage": 0,
          "cpu_usage": 0.0,
          "capability_violations": [],
          "security_warnings": [],
          "error": "ML transpilation failed: ",
          "error_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 194, in execute\n    python_code = self._transpile_ml_code(ml_code)\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 232, in _transpile_ml_code\n    raise SandboxError(f\"ML transpilation failed: {'; '.join(error_messages)}\")\nmlpy.runtime.sandbox.sandbox.SandboxError: ML transpilation failed: \n"
        },
        "stdout": "",
        "stderr": "ML transpilation failed: "
      },
      "error_message": null,
      "threat_count": 0
    },
    {
      "test_case": {
        "name": "language_coverage::python_imports_demo",
        "file_path": "C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\language_coverage\\python_imports_demo.ml",
        "category": "language_coverage",
        "expected_threats": 0,
        "should_transpile": true,
        "should_execute": true,
        "description": "ML importing Python modules demonstration"
      },
      "result": "TestResult.PASS",
      "execution_time_ms": 39.9324893951416,
      "security_analysis": {
        "pattern_matches": 0,
        "ast_violations": 0,
        "data_flow_violations": 0,
        "total_threats": 0,
        "analysis_time_ms": 2.881765365600586
      },
      "transpilation_result": [
        "\"\"\"Generated Python code from mlpy ML transpiler.\"\"\"\n\n# This code was automatically generated from ML source\n# Modifications to this file may be lost on regeneration\n\n# ML Standard Library imports\nfrom mlpy.stdlib import console, getCurrentTime, processData\n\nimport math\n\nimport json\n\nimport random\n\ndef mathOperations():\n    radius = 5.0\n    area = ((math['pi'] * radius) * radius)\n    sqrt_result = ml_unknown_identifier_1816322086560(25.0)\n    power_result = ml_unknown_identifier_1816322087008(2.0, 8.0)\n    return {'area': area, 'sqrt': sqrt_result, 'power': power_result, 'pi': math['pi'], 'e': math['e']}\n\ndef randomOperations():\n    random_float = ml_unknown_identifier_1816322086336()\n    random_choice = ml_unknown_identifier_1816322094176([1, 2, 3, 4, 5])\n    return {'random_float': random_float, 'choice': random_choice}\n\ndef jsonOperations():\n    data = {'name': 'ML Program', 'version': 1.0, 'active': True}\n    json_string = ml_unknown_identifier_1816322088464(data)\n    return {'original': data, 'serialized': json_string}\n\ndef combinedOperations():\n    math_result = mathOperations()\n    random_result = randomOperations()\n    json_result = jsonOperations()\n    final_result = {'math': math_result, 'random': random_result, 'json': json_result, 'timestamp': 'generated_by_ml'}\n    return final_result\n\n# End of generated code",
        [],
        {
          "version": 3,
          "file": "generated.py",
          "sourceRoot": "",
          "sources": [
            "unknown.ml"
          ],
          "names": [],
          "mappings": "[]",
          "sourcesContent": [
            null
          ]
        }
      ],
      "execution_result": {
        "success": true,
        "result": {
          "success": false,
          "return_value": null,
          "stdout": "",
          "stderr": "ML transpilation failed: ",
          "exit_code": 0,
          "execution_time": 0.007939815521240234,
          "memory_usage": 0,
          "cpu_usage": 0.0,
          "capability_violations": [],
          "security_warnings": [],
          "error": "ML transpilation failed: ",
          "error_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 194, in execute\n    python_code = self._transpile_ml_code(ml_code)\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 232, in _transpile_ml_code\n    raise SandboxError(f\"ML transpilation failed: {'; '.join(error_messages)}\")\nmlpy.runtime.sandbox.sandbox.SandboxError: ML transpilation failed: \n"
        },
        "stdout": "",
        "stderr": "ML transpilation failed: "
      },
      "error_message": null,
      "threat_count": 0
    },
    {
      "test_case": {
        "name": "language_coverage::test_functional_module",
        "file_path": "C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\language_coverage\\test_functional_module.ml",
        "category": "language_coverage",
        "expected_threats": 0,
        "should_transpile": true,
        "should_execute": true,
        "description": "Comprehensive test for ML Functional Programming Standard Library"
      },
      "result": "TestResult.PASS",
      "execution_time_ms": 182.06238746643066,
      "security_analysis": {
        "pattern_matches": 0,
        "ast_violations": 0,
        "data_flow_violations": 0,
        "total_threats": 0,
        "analysis_time_ms": 34.34896469116211
      },
      "transpilation_result": [
        "\"\"\"Generated Python code from mlpy ML transpiler.\"\"\"\n\n# This code was automatically generated from ML source\n# Modifications to this file may be lost on regeneration\n\n# ML Standard Library imports\nfrom mlpy.stdlib import console, getCurrentTime, processData\n\n# WARNING: Import 'functional' requires security review\n# import functional\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nwords = ['hello', 'world', 'functional', 'programming', 'ml']\n\npeople = [{'name': 'Alice', 'age': 25, 'department': 'Engineering'}, {'name': 'Bob', 'age': 30, 'department': 'Sales'}, {'name': 'Carol', 'age': 35, 'department': 'Engineering'}, {'name': 'Dave', 'age': 28, 'department': 'Marketing'}, {'name': 'Eve', 'age': 32, 'department': 'Engineering'}]\n\ndef isEven(n):\n    return ((n % 2) == 0)\n\ndef isOdd(n):\n    return ((n % 2) == 1)\n\ndef double(n):\n    return (n * 2)\n\ndef square(n):\n    return (n * n)\n\ndef add(a, b):\n    return (a + b)\n\ndef multiply(a, b):\n    return (a * b)\n\ndef isLongWord(word):\n    return (ml_unknown_identifier_1816322090144(word) > 5)\n\ndef getAge(person):\n    return person['age']\n\ndef getDepartment(person):\n    return person['department']\n\ndef isEngineer(person):\n    return (person['department'] == 'Engineering')\n\ndef testCoreOperations():\n    ml_unknown_identifier_1816322091936('=== Testing Core Functional Operations ===')\n    doubled = ml_unknown_identifier_1816322092160(double, numbers)\n    ml_unknown_identifier_1816322092608('Doubled numbers:', doubled)\n    squared = ml_unknown_identifier_1816322092272(square, numbers)\n    ml_unknown_identifier_1816322092944('Squared numbers:', squared)\n    evens = ml_unknown_identifier_1816322093280(isEven, numbers)\n    ml_unknown_identifier_1816322093504('Even numbers:', evens)\n    odds = ml_unknown_identifier_1816322093840(isOdd, numbers)\n    ml_unknown_identifier_1816322093952('Odd numbers:', odds)\n    longWords = ml_unknown_identifier_1816322094288(isLongWord, words)\n    ml_unknown_identifier_1816322095184('Long words:', longWords)\n    sum = ml_unknown_identifier_1816322094960(add, 0, numbers)\n    ml_unknown_identifier_1816322096080('Sum of numbers:', sum)\n    product = ml_unknown_identifier_1816322095856(multiply, 1, numbers)\n    ml_unknown_identifier_1816322095520('Product of numbers:', product)\n    sumOfSquaredEvens = ml_unknown_identifier_1816322096640(add, 0, ml_unknown_identifier_1816322096528(square, ml_unknown_identifier_1816322096416(isEven, numbers)))\n    ml_unknown_identifier_1816322095408('Sum of squared evens:', sumOfSquaredEvens)\n    ml_unknown_identifier_1816333795744()\n\ndef testSearchOperations():\n    ml_unknown_identifier_1816333795632('=== Testing Search and Selection Operations ===')\n    firstEven = ml_unknown_identifier_1816333796304(isEven, numbers)\n    ml_unknown_identifier_1816333796640('First even number:', firstEven)\n    firstEngineer = ml_unknown_identifier_1816333796864(isEngineer, people)\n    ml_unknown_identifier_1816333797200('First engineer:', firstEngineer['name'])\n    firstEvenIndex = ml_unknown_identifier_1816333797536(isEven, numbers)\n    ml_unknown_identifier_1816333796192('Index of first even:', firstEvenIndex)\n    hasEvens = ml_unknown_identifier_1816333797872(isEven, numbers)\n    ml_unknown_identifier_1816333798208('Has even numbers:', hasEvens)\n    hasLargeNumbers = ml_unknown_identifier_1816333798432(# UNKNOWN_EXPRESSION: FunctionDefinition, numbers)\n    ml_unknown_identifier_1816333799104('Has numbers > 100:', hasLargeNumbers)\n    allPositive = ml_unknown_identifier_1816333799328(# UNKNOWN_EXPRESSION: FunctionDefinition, numbers)\n    ml_unknown_identifier_1816333800000('All numbers positive:', allPositive)\n    allEven = ml_unknown_identifier_1816333800224(isEven, numbers)\n    ml_unknown_identifier_1816333800560('All numbers even:', allEven)\n    noNegative = ml_unknown_identifier_1816333800784(# UNKNOWN_EXPRESSION: FunctionDefinition, numbers)\n    ml_unknown_identifier_1816333801456('No negative numbers:', noNegative)\n    ml_unknown_identifier_1816333801680()\n\ndef testFunctionComposition():\n    ml_unknown_identifier_1816333802016('=== Testing Function Composition ===')\n    doubleAndSquare = ml_unknown_identifier_1816333802240(square, double)\n    result1 = doubleAndSquare(5)\n    ml_unknown_identifier_1816333802800('Compose double then square (5):', result1)\n    squareAndDouble = ml_unknown_identifier_1816333803024(square, double)\n    result2 = squareAndDouble(5)\n    ml_unknown_identifier_1816333803584('Pipe square then double (5):', result2)\n    identityResult = ml_unknown_identifier_1816333803808(42)\n    ml_unknown_identifier_1816333804144('Identity(42):', identityResult)\n    alwaysTrue = ml_unknown_identifier_1816333804368(True)\n    constantResult = alwaysTrue(99)\n    ml_unknown_identifier_1816333804928('Constant(true)(99):', constantResult)\n    subtract = # UNKNOWN_EXPRESSION: FunctionDefinition\n    flippedSubtract = ml_unknown_identifier_1816333805712(subtract)\n    normal = subtract(10, 3)\n    flipped = flippedSubtract(10, 3)\n    ml_unknown_identifier_1816333806496('Normal subtract(10, 3):', normal)\n    ml_unknown_identifier_1816333806720('Flipped subtract(10, 3):', flipped)\n    notEven = ml_unknown_identifier_1816333806944(isEven)\n    result3 = notEven(4)\n    result4 = notEven(5)\n    ml_unknown_identifier_1816333807728('Not even(4):', result3)\n    ml_unknown_identifier_1816333807952('Not even(5):', result4)\n    ml_unknown_identifier_1816333808176()\n\ndef testListProcessing():\n    ml_unknown_identifier_1816333808512('=== Testing List Processing Operations ===')\n    duplicateAndSquare = # UNKNOWN_EXPRESSION: FunctionDefinition\n    flatMapped = ml_unknown_identifier_1816333809296(duplicateAndSquare, [2, 3, 4])\n    ml_unknown_identifier_1816333809744('FlatMap duplicate and square:', flatMapped)\n    letters = ['a', 'b', 'c']\n    zipped = ml_unknown_identifier_1816333810192(numbers, letters)\n    ml_unknown_identifier_1816333810528('Zipped numbers and letters:', zipped)\n    addStrings = # UNKNOWN_EXPRESSION: FunctionDefinition\n    zippedWith = ml_unknown_identifier_1816333811312(addStrings, [1, 2, 3], ['a', 'b', 'c'])\n    ml_unknown_identifier_1816333877552('ZipWith add:', zippedWith)\n    partitioned = ml_unknown_identifier_1816333877776(isEven, numbers)\n    ml_unknown_identifier_1816333878112('Partitioned evens/odds:', partitioned)\n    peopleByDept = ml_unknown_identifier_1816333878336(getDepartment, people)\n    ml_unknown_identifier_1816333878672('People by department:', peopleByDept)\n    duplicates = [1, 2, 2, 3, 3, 3, 4, 5, 5]\n    uniqueNumbers = ml_unknown_identifier_1816333879120(duplicates)\n    ml_unknown_identifier_1816333879456('Unique numbers:', uniqueNumbers)\n    ml_unknown_identifier_1816333879680()\n\ndef testListSlicing():\n    ml_unknown_identifier_1816333880016('=== Testing List Slicing Operations ===')\n    firstFive = ml_unknown_identifier_1816333880240(5, numbers)\n    ml_unknown_identifier_1816333880576('Take first 5:', firstFive)\n    afterFive = ml_unknown_identifier_1816333880800(5, numbers)\n    ml_unknown_identifier_1816333881136('Drop first 5:', afterFive)\n    takeWhileSmall = ml_unknown_identifier_1816333881360(# UNKNOWN_EXPRESSION: FunctionDefinition, numbers)\n    ml_unknown_identifier_1816333882032('Take while < 6:', takeWhileSmall)\n    dropWhileSmall = ml_unknown_identifier_1816333882256(# UNKNOWN_EXPRESSION: FunctionDefinition, numbers)\n    ml_unknown_identifier_1816333882928('Drop while < 6:', dropWhileSmall)\n    ml_unknown_identifier_1816333883152()\n\ndef testConditionalOperations():\n    ml_unknown_identifier_1816333883488('=== Testing Conditional Operations ===')\n    evenOrOddMessage = ml_unknown_identifier_1816333883712(isEven, # UNKNOWN_EXPRESSION: FunctionDefinition, # UNKNOWN_EXPRESSION: FunctionDefinition)\n    ml_unknown_identifier_1816333884720('IfElse for 4:', evenOrOddMessage(4))\n    ml_unknown_identifier_1816333885056('IfElse for 7:', evenOrOddMessage(7))\n    doubleIfEven = ml_unknown_identifier_1816333885392(isEven, double)\n    ml_unknown_identifier_1816333885728('Double if even (4):', doubleIfEven(4))\n    ml_unknown_identifier_1816333886064('Double if even (5):', doubleIfEven(5))\n    doubleUnlessEven = ml_unknown_identifier_1816333886400(isEven, double)\n    ml_unknown_identifier_1816333886736('Double unless even (4):', doubleUnlessEven(4))\n    ml_unknown_identifier_1816333887072('Double unless even (5):', doubleUnlessEven(5))\n    numberCategory = ml_unknown_identifier_1816333887408([[# UNKNOWN_EXPRESSION: FunctionDefinition, # UNKNOWN_EXPRESSION: FunctionDefinition], [# UNKNOWN_EXPRESSION: FunctionDefinition, # UNKNOWN_EXPRESSION: FunctionDefinition], [# UNKNOWN_EXPRESSION: FunctionDefinition, # UNKNOWN_EXPRESSION: FunctionDefinition], [# UNKNOWN_EXPRESSION: FunctionDefinition, # UNKNOWN_EXPRESSION: FunctionDefinition], [ml_unknown_identifier_1816333890208(True), # UNKNOWN_EXPRESSION: FunctionDefinition]])\n    ml_unknown_identifier_1816333891104('Category of -5:', numberCategory(5))\n    ml_unknown_identifier_1816333891440('Category of 0:', numberCategory(0))\n    ml_unknown_identifier_1816333891776('Category of 5:', numberCategory(5))\n    ml_unknown_identifier_1816333892112('Category of 50:', numberCategory(50))\n    ml_unknown_identifier_1816333892448('Category of 500:', numberCategory(500))\n    ml_unknown_identifier_1816333892784()\n\ndef testUtilities():\n    ml_unknown_identifier_1816333893120('=== Testing Utility Functions ===')\n    range1to5 = ml_unknown_identifier_1816333893344(1, 6, 1)\n    ml_unknown_identifier_1816333828288('Range 1 to 5:', range1to5)\n    evenRange = ml_unknown_identifier_1816333828512(0, 11, 2)\n    ml_unknown_identifier_1816333828848('Even range 0 to 10:', evenRange)\n    repeated = ml_unknown_identifier_1816333829072('hello', 3)\n    ml_unknown_identifier_1816333829408(\"Repeat 'hello' 3 times:\", repeated)\n    squares = ml_unknown_identifier_1816333829632(square, 5)\n    ml_unknown_identifier_1816333829968('Squares of indices 0-4:', squares)\n    ml_unknown_identifier_1816333830192()\n\ndef advancedFunctionalDemo():\n    ml_unknown_identifier_1816333830528('=== Advanced Functional Programming Demo ===')\n    ml_unknown_identifier_1816333830752('Processing employee data with FP pipeline:')\n    engineeringStats = ml_unknown_identifier_1816333830976(ml_unknown_identifier_1816333831088(functional['filter'], isEngineer), ml_unknown_identifier_1816333831424(functional['map'], getAge), # UNKNOWN_EXPRESSION: FunctionDefinition)\n    avgEngineerAge = engineeringStats(people)\n    ml_unknown_identifier_1816333833104('Average engineer age:', avgEngineerAge)\n    analyzeNumbers = ml_unknown_identifier_1816333833328([# UNKNOWN_EXPRESSION: FunctionDefinition, # UNKNOWN_EXPRESSION: FunctionDefinition, # UNKNOWN_EXPRESSION: FunctionDefinition, functional['identity']])\n    analysis = analyzeNumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    ml_unknown_identifier_1816333837472('Number analysis:', analysis)\n    ml_unknown_identifier_1816333837696()\n\ndef runAllTests():\n    ml_unknown_identifier_1816333838032('======================================================')\n    ml_unknown_identifier_1816333838256('ML FUNCTIONAL PROGRAMMING STANDARD LIBRARY TESTS')\n    ml_unknown_identifier_1816333838480('======================================================')\n    ml_unknown_identifier_1816333838704()\n    testCoreOperations()\n    testSearchOperations()\n    testFunctionComposition()\n    testListProcessing()\n    testListSlicing()\n    testConditionalOperations()\n    testUtilities()\n    advancedFunctionalDemo()\n    ml_unknown_identifier_1816333839824('======================================================')\n    ml_unknown_identifier_1816333840048('ALL FUNCTIONAL PROGRAMMING TESTS COMPLETED!')\n    ml_unknown_identifier_1816333840272('======================================================')\n    return {'test_status': 'completed', 'module': 'functional', 'features_tested': ['map, filter, reduce', 'find, some, every, none', 'compose, pipe, curry', 'zip, partition, groupBy, unique', 'take, drop, takeWhile, dropWhile', 'ifElse, when, unless, cond', 'range, repeat, times', 'advanced composition and pipelines'], 'total_operations': 50, 'functional_paradigm': 'fully_supported'}\n\ntestResults = runAllTests()\n\ndef createDataPipeline():\n    processEmployeeData = ml_unknown_identifier_1816333841056([ml_unknown_identifier_1816333841168(functional['filter'], # UNKNOWN_EXPRESSION: FunctionDefinition), ml_unknown_identifier_1816333842288(functional['map'], # UNKNOWN_EXPRESSION: FunctionDefinition), ml_unknown_identifier_1816333843520(functional['groupBy'], # UNKNOWN_EXPRESSION: FunctionDefinition), # UNKNOWN_EXPRESSION: FunctionDefinition])\n    result = processEmployeeData(people)\n    ml_unknown_identifier_1816333781936('Employee processing pipeline result:', result)\n    return result\n\nfinalDemo = createDataPipeline()\n\n# End of generated code",
        [],
        {
          "version": 3,
          "file": "generated.py",
          "sourceRoot": "",
          "sources": [
            "unknown.ml"
          ],
          "names": [],
          "mappings": "[]",
          "sourcesContent": [
            null
          ]
        }
      ],
      "execution_result": {
        "success": true,
        "result": {
          "success": false,
          "return_value": null,
          "stdout": "",
          "stderr": "ML transpilation failed: ",
          "exit_code": 0,
          "execution_time": 0.010109424591064453,
          "memory_usage": 0,
          "cpu_usage": 0.0,
          "capability_violations": [],
          "security_warnings": [],
          "error": "ML transpilation failed: ",
          "error_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 194, in execute\n    python_code = self._transpile_ml_code(ml_code)\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 232, in _transpile_ml_code\n    raise SandboxError(f\"ML transpilation failed: {'; '.join(error_messages)}\")\nmlpy.runtime.sandbox.sandbox.SandboxError: ML transpilation failed: \n"
        },
        "stdout": "",
        "stderr": "ML transpilation failed: "
      },
      "error_message": null,
      "threat_count": 0
    },
    {
      "test_case": {
        "name": "language_coverage::test_import_system",
        "file_path": "C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\language_coverage\\test_import_system.ml",
        "category": "language_coverage",
        "expected_threats": 0,
        "should_transpile": true,
        "should_execute": true,
        "description": "Comprehensive test for the new ML import system"
      },
      "result": "TestResult.PASS",
      "execution_time_ms": 78.72152328491211,
      "security_analysis": {
        "pattern_matches": 0,
        "ast_violations": 0,
        "data_flow_violations": 0,
        "total_threats": 0,
        "analysis_time_ms": 10.81705093383789
      },
      "transpilation_result": [
        "\"\"\"Generated Python code from mlpy ML transpiler.\"\"\"\n\n# This code was automatically generated from ML source\n# Modifications to this file may be lost on regeneration\n\n# ML Standard Library imports\nfrom mlpy.stdlib import console, getCurrentTime, processData\n\nimport math\n\nimport json\n\n# WARNING: Import 'string' requires security review\n# import string\n\nimport datetime\n\ndef testMathOperations():\n    radius = 5.0\n    area = ((math['pi'] * radius) * radius)\n    sqrt_result = ml_unknown_identifier_1816322087568(25.0)\n    power_result = ml_unknown_identifier_1816322087344(2.0, 8.0)\n    return {'pi': math['pi'], 'area': area, 'sqrt_25': sqrt_result, '2_pow_8': power_result, 'abs_negative': ml_unknown_identifier_1816322088464(42), 'min': ml_unknown_identifier_1816322087904(10, 20), 'max': ml_unknown_identifier_1816322089920(10, 20)}\n\ndef testStringOperations():\n    text = 'Hello, World!'\n    return {'original': text, 'uppercase': ml_unknown_identifier_1816322090480(text), 'lowercase': ml_unknown_identifier_1816322088912(text), 'length': ml_unknown_identifier_1816322089808(text), 'contains_world': ml_unknown_identifier_1816322090256(text, 'World'), 'starts_with_hello': ml_unknown_identifier_1816322090144(text, 'Hello'), 'stripped': ml_unknown_identifier_1816322091040('  spaced  '), 'replaced': ml_unknown_identifier_1816322090816(text, 'World', 'ML')}\n\ndef testJsonOperations():\n    data = {'name': 'ML Import Test', 'version': 2.0, 'features': ['imports', 'security', 'stdlib'], 'active': True}\n    json_string = ml_unknown_identifier_1816322091488(data)\n    parsed_back = ml_unknown_identifier_1816322092720(json_string)\n    return {'original': data, 'serialized': json_string, 'round_trip': parsed_back}\n\ndef testDateTimeOperations():\n    current_time = ml_unknown_identifier_1816322093056()\n    formatted = ml_unknown_identifier_1816322092832(current_time)\n    iso_format = ml_unknown_identifier_1816322093168(current_time)\n    future_time = ml_unknown_identifier_1816322093504(current_time, 24)\n    hours_diff = ml_unknown_identifier_1816322093840(current_time, future_time)\n    return {'current_timestamp': current_time, 'readable_format': formatted, 'iso_format': iso_format, 'future_timestamp': future_time, 'hours_difference': hours_diff, 'is_leap_year_2024': ml_unknown_identifier_1816322094736(2024)}\n\ndef runComprehensiveTest():\n    ml_unknown_identifier_1816322095184('Testing ML Import System...')\n    math_results = testMathOperations()\n    string_results = testStringOperations()\n    json_results = testJsonOperations()\n    datetime_results = testDateTimeOperations()\n    comprehensive_result = {'test_name': 'ML Import System Validation', 'status': 'success', 'results': {'math': math_results, 'string': string_results, 'json': json_results, 'datetime': datetime_results}, 'summary': {'total_tests': 4, 'stdlib_modules_tested': ['math', 'string', 'json', 'datetime'], 'security_validated': True, 'capability_system_integrated': True}}\n    return comprehensive_result\n\ntest_result = runComprehensiveTest()\n\ndef displayResults():\n    ml_unknown_identifier_1816322094512('=== ML Import System Test Results ===')\n    ml_unknown_identifier_1816333795408('Test Status:', test_result['status'])\n    ml_unknown_identifier_1816333801904('Modules Tested:', test_result['summary']['stdlib_modules_tested'])\n    ml_unknown_identifier_1816333796416('Total Tests:', test_result['summary']['total_tests'])\n    ml_unknown_identifier_1816333797088('\\\\n--- Math Operations ---')\n    ml_unknown_identifier_1816333796864('\u03c0 =', test_result['results']['math']['pi'])\n    ml_unknown_identifier_1816333797648('sqrt(25) =', test_result['results']['math']['sqrt_25'])\n    ml_unknown_identifier_1816333797984('2^8 =', test_result['results']['math']['2_pow_8'])\n    ml_unknown_identifier_1816333798992('abs(-42) =', test_result['results']['math']['abs_negative'])\n    ml_unknown_identifier_1816333798432('\\\\n--- String Operations ---')\n    ml_unknown_identifier_1816333799104('Original:', test_result['results']['string']['original'])\n    ml_unknown_identifier_1816333799440('Uppercase:', test_result['results']['string']['uppercase'])\n    ml_unknown_identifier_1816333800336('Length:', test_result['results']['string']['length'])\n    ml_unknown_identifier_1816333801232(\"Contains 'World':\", test_result['results']['string']['contains_world'])\n    ml_unknown_identifier_1816333801568('\\\\n--- JSON Operations ---')\n    ml_unknown_identifier_1816333801792('Serialized:', test_result['results']['json']['serialized'])\n    ml_unknown_identifier_1816333802464('Round-trip success:', (test_result['results']['json']['round_trip'] != null))\n    ml_unknown_identifier_1816333802800('\\\\n--- DateTime Operations ---')\n    ml_unknown_identifier_1816333803136('Current time:', test_result['results']['datetime']['readable_format'])\n    ml_unknown_identifier_1816333803584('ISO format:', test_result['results']['datetime']['iso_format'])\n    ml_unknown_identifier_1816333804144('Hours difference:', test_result['results']['datetime']['hours_difference'])\n    ml_unknown_identifier_1816333804704('Is 2024 leap year:', test_result['results']['datetime']['is_leap_year_2024'])\n    ml_unknown_identifier_1816333805376('\\\\n=== Test Complete ===')\n    return 'Import system test completed successfully!'\n\nfinal_message = displayResults()\n\n# End of generated code",
        [],
        {
          "version": 3,
          "file": "generated.py",
          "sourceRoot": "",
          "sources": [
            "unknown.ml"
          ],
          "names": [],
          "mappings": "[]",
          "sourcesContent": [
            null
          ]
        }
      ],
      "execution_result": {
        "success": true,
        "result": {
          "success": false,
          "return_value": null,
          "stdout": "",
          "stderr": "ML transpilation failed: ",
          "exit_code": 0,
          "execution_time": 0.010168313980102539,
          "memory_usage": 0,
          "cpu_usage": 0.0,
          "capability_violations": [],
          "security_warnings": [],
          "error": "ML transpilation failed: ",
          "error_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 194, in execute\n    python_code = self._transpile_ml_code(ml_code)\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 232, in _transpile_ml_code\n    raise SandboxError(f\"ML transpilation failed: {'; '.join(error_messages)}\")\nmlpy.runtime.sandbox.sandbox.SandboxError: ML transpilation failed: \n"
        },
        "stdout": "",
        "stderr": "ML transpilation failed: "
      },
      "error_message": null,
      "threat_count": 0
    }
  ]
}