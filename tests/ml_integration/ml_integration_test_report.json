{
  "summary": {
    "total_tests": 16,
    "passed": 16,
    "failed": 0,
    "errors": 0,
    "success_rate": 1.0,
    "total_time_ms": 1218.4169292449951,
    "avg_time_ms": 76.1510580778122,
    "status": "EXCELLENT"
  },
  "categories": {
    "legitimate_programs": {
      "total": 2,
      "passed": 2,
      "failed": 0,
      "errors": 0
    },
    "malicious_programs": {
      "total": 4,
      "passed": 4,
      "failed": 0,
      "errors": 0
    },
    "edge_cases": {
      "total": 2,
      "passed": 2,
      "failed": 0,
      "errors": 0
    },
    "language_coverage": {
      "total": 8,
      "passed": 8,
      "failed": 0,
      "errors": 0
    }
  },
  "security_analysis": {
    "total_threats": 18,
    "malicious_detected": 4,
    "malicious_total": 4
  },
  "detailed_results": [
    {
      "test_case": {
        "name": "legitimate_programs::data_analysis",
        "file_path": "C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\legitimate_programs\\data_analysis.ml",
        "category": "legitimate_programs",
        "expected_threats": 0,
        "should_transpile": true,
        "should_execute": true,
        "description": "Data analysis pipeline test program (corrected ML syntax)"
      },
      "result": "TestResult.PASS",
      "execution_time_ms": 680.3066730499268,
      "security_analysis": {
        "pattern_matches": 0,
        "ast_violations": 0,
        "data_flow_violations": 0,
        "total_threats": 0,
        "analysis_time_ms": 5.656003952026367
      },
      "transpilation_result": [
        "\"\"\"Generated Python code from mlpy ML transpiler.\"\"\"\n\n# This code was automatically generated from ML source\n# Modifications to this file may be lost on regeneration\n\n# ML Standard Library imports\nfrom mlpy.stdlib import console, getCurrentTime, processData\n\ndef analyzeData(data):\n    sum = 0\n    count = 0\n    i = 0\n    while (i < 5):\n        value = data[i]\n        sum = (sum + value)\n        count = (count + 1)\n        i = (i + 1)\n    mean = (sum / count)\n    return mean\n\ndef processDataSet(dataset):\n    results = []\n    i = 0\n    while (i < 3):\n        item = dataset[i]\n        if (item > 10):\n            processed = (item * 2)\n            results[i] = processed\n        else:\n            results[i] = (item + 1)\n        i = (i + 1)\n    return results\n\ndef findMinMax(values):\n    min = values[0]\n    max = values[0]\n    i = 1\n    while (i < 4):\n        current = values[i]\n        if (current < min):\n            min = current\n        if (current > max):\n            max = current\n        i = (i + 1)\n    return [min, max]\n\nrawData = [1, 5, 10, 15, 20]\n\nmean = analyzeData(rawData)\n\nprocessed = processDataSet([3, 12, 8])\n\nminMax = findMinMax([4, 2, 9, 1])\n\n# End of generated code",
        [],
        {
          "version": 3,
          "file": "generated.py",
          "sourceRoot": "",
          "sources": [
            "unknown.ml"
          ],
          "names": [],
          "mappings": "[]",
          "sourcesContent": [
            null
          ]
        }
      ],
      "execution_result": {
        "success": true,
        "result": {
          "success": false,
          "return_value": null,
          "stdout": "",
          "stderr": "ML transpilation failed: ",
          "exit_code": 0,
          "execution_time": 0.3227107524871826,
          "memory_usage": 0,
          "cpu_usage": 0.0,
          "capability_violations": [],
          "security_warnings": [],
          "error": "ML transpilation failed: ",
          "error_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 194, in execute\n    python_code = self._transpile_ml_code(ml_code)\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 232, in _transpile_ml_code\n    raise SandboxError(f\"ML transpilation failed: {'; '.join(error_messages)}\")\nmlpy.runtime.sandbox.sandbox.SandboxError: ML transpilation failed: \n"
        },
        "stdout": "",
        "stderr": "ML transpilation failed: "
      },
      "error_message": null,
      "threat_count": 0
    },
    {
      "test_case": {
        "name": "legitimate_programs::web_scraper",
        "file_path": "C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\legitimate_programs\\web_scraper.ml",
        "category": "legitimate_programs",
        "expected_threats": 0,
        "should_transpile": true,
        "should_execute": true,
        "description": "Web scraper simulation test program (ML syntax)"
      },
      "result": "TestResult.PASS",
      "execution_time_ms": 21.210193634033203,
      "security_analysis": {
        "pattern_matches": 0,
        "ast_violations": 0,
        "data_flow_violations": 0,
        "total_threats": 0,
        "analysis_time_ms": 1.9652843475341797
      },
      "transpilation_result": [
        "\"\"\"Generated Python code from mlpy ML transpiler.\"\"\"\n\n# This code was automatically generated from ML source\n# Modifications to this file may be lost on regeneration\n\n# ML Standard Library imports\nfrom mlpy.stdlib import console, getCurrentTime, processData\n\ndef createScraper(baseUrl):\n    scraper = {}\n    scraper['baseUrl'] = baseUrl\n    scraper['pageCount'] = 0\n    return scraper\n\ndef fetchPage(scraper, url):\n    response = {}\n    response['url'] = url\n    response['status'] = 200\n    response['body'] = ('Sample HTML content from ' + url)\n    return response\n\ndef extractData(response):\n    if (response['status'] == 200):\n        data = {}\n        data['url'] = response['url']\n        data['content'] = response['body']\n        data['wordCount'] = 10\n        return data\n    else:\n        return {}\n\ndef scrapePages(scraper, url1, url2):\n    result1 = fetchPage(scraper, url1)\n    result2 = fetchPage(scraper, url2)\n    data1 = extractData(result1)\n    data2 = extractData(result2)\n    scraper['pageCount'] = 2\n    return [data1, data2]\n\nscraper = createScraper('https://example.com')\n\nresults = scrapePages(scraper, 'https://example.com/page1', 'https://example.com/page2')\n\n# End of generated code",
        [],
        {
          "version": 3,
          "file": "generated.py",
          "sourceRoot": "",
          "sources": [
            "unknown.ml"
          ],
          "names": [],
          "mappings": "[]",
          "sourcesContent": [
            null
          ]
        }
      ],
      "execution_result": {
        "success": true,
        "result": {
          "success": false,
          "return_value": null,
          "stdout": "",
          "stderr": "ML transpilation failed: ",
          "exit_code": 0,
          "execution_time": 0.004466533660888672,
          "memory_usage": 0,
          "cpu_usage": 0.0,
          "capability_violations": [],
          "security_warnings": [],
          "error": "ML transpilation failed: ",
          "error_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 194, in execute\n    python_code = self._transpile_ml_code(ml_code)\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 232, in _transpile_ml_code\n    raise SandboxError(f\"ML transpilation failed: {'; '.join(error_messages)}\")\nmlpy.runtime.sandbox.sandbox.SandboxError: ML transpilation failed: \n"
        },
        "stdout": "",
        "stderr": "ML transpilation failed: "
      },
      "error_message": null,
      "threat_count": 0
    },
    {
      "test_case": {
        "name": "malicious_programs::code_injection",
        "file_path": "C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\malicious_programs\\code_injection.ml",
        "category": "malicious_programs",
        "expected_threats": 0,
        "should_transpile": false,
        "should_execute": false,
        "description": "Template injection vulnerabilities (corrected ML syntax)"
      },
      "result": "TestResult.PASS",
      "execution_time_ms": 3.5932064056396484,
      "security_analysis": {
        "pattern_matches": 8,
        "ast_violations": 0,
        "data_flow_violations": 0,
        "total_threats": 8,
        "analysis_time_ms": 3.2660961151123047
      },
      "transpilation_result": null,
      "execution_result": null,
      "error_message": null,
      "threat_count": 8
    },
    {
      "test_case": {
        "name": "malicious_programs::data_flow_evasion",
        "file_path": "C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\malicious_programs\\data_flow_evasion.ml",
        "category": "malicious_programs",
        "expected_threats": 0,
        "should_transpile": false,
        "should_execute": false,
        "description": "Complex taint propagation paths (ML syntax with malicious patterns)"
      },
      "result": "TestResult.PASS",
      "execution_time_ms": 3.33404541015625,
      "security_analysis": {
        "pattern_matches": 3,
        "ast_violations": 0,
        "data_flow_violations": 0,
        "total_threats": 3,
        "analysis_time_ms": 2.432584762573242
      },
      "transpilation_result": null,
      "execution_result": null,
      "error_message": null,
      "threat_count": 3
    },
    {
      "test_case": {
        "name": "malicious_programs::import_evasion",
        "file_path": "C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\malicious_programs\\import_evasion.ml",
        "category": "malicious_programs",
        "expected_threats": 0,
        "should_transpile": false,
        "should_execute": false,
        "description": "Dynamic import name construction (ML syntax with malicious patterns)"
      },
      "result": "TestResult.PASS",
      "execution_time_ms": 2.9439926147460938,
      "security_analysis": {
        "pattern_matches": 4,
        "ast_violations": 0,
        "data_flow_violations": 0,
        "total_threats": 4,
        "analysis_time_ms": 1.9671916961669922
      },
      "transpilation_result": null,
      "execution_result": null,
      "error_message": null,
      "threat_count": 4
    },
    {
      "test_case": {
        "name": "malicious_programs::reflection_evasion",
        "file_path": "C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\malicious_programs\\reflection_evasion.ml",
        "category": "malicious_programs",
        "expected_threats": 0,
        "should_transpile": false,
        "should_execute": false,
        "description": "Obfuscated reflection through string construction (corrected ML syntax)"
      },
      "result": "TestResult.PASS",
      "execution_time_ms": 3.148317337036133,
      "security_analysis": {
        "pattern_matches": 3,
        "ast_violations": 0,
        "data_flow_violations": 0,
        "total_threats": 3,
        "analysis_time_ms": 2.2270679473876953
      },
      "transpilation_result": null,
      "execution_result": null,
      "error_message": null,
      "threat_count": 3
    },
    {
      "test_case": {
        "name": "edge_cases::deep_nesting",
        "file_path": "C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\edge_cases\\deep_nesting.ml",
        "category": "edge_cases",
        "expected_threats": 0,
        "should_transpile": true,
        "should_execute": true,
        "description": "Deep nesting structures test program (corrected ML syntax)"
      },
      "result": "TestResult.PASS",
      "execution_time_ms": 16.864299774169922,
      "security_analysis": {
        "pattern_matches": 0,
        "ast_violations": 0,
        "data_flow_violations": 0,
        "total_threats": 0,
        "analysis_time_ms": 0.9379386901855469
      },
      "transpilation_result": [
        "\"\"\"Generated Python code from mlpy ML transpiler.\"\"\"\n\n# This code was automatically generated from ML source\n# Modifications to this file may be lost on regeneration\n\n# ML Standard Library imports\nfrom mlpy.stdlib import console, getCurrentTime, processData\n\ndef createNestedData(depth):\n    if (depth <= 0):\n        return 42\n    nested = createNestedData((depth - 1))\n    result = (nested + 1)\n    return result\n\ndef processDeepStructure(level):\n    if (level > 10):\n        innerValue = processDeepStructure((level - 1))\n        return (innerValue * 2)\n    else:\n        if (level > 5):\n            return (level + 100)\n        else:\n            return level\n\ndeepResult = createNestedData(20)\n\nprocessed = processDeepStructure(15)\n\n# End of generated code",
        [],
        {
          "version": 3,
          "file": "generated.py",
          "sourceRoot": "",
          "sources": [
            "unknown.ml"
          ],
          "names": [],
          "mappings": "[]",
          "sourcesContent": [
            null
          ]
        }
      ],
      "execution_result": {
        "success": true,
        "result": {
          "success": false,
          "return_value": null,
          "stdout": "",
          "stderr": "ML transpilation failed: ",
          "exit_code": 0,
          "execution_time": 0.004522562026977539,
          "memory_usage": 0,
          "cpu_usage": 0.0,
          "capability_violations": [],
          "security_warnings": [],
          "error": "ML transpilation failed: ",
          "error_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 194, in execute\n    python_code = self._transpile_ml_code(ml_code)\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 232, in _transpile_ml_code\n    raise SandboxError(f\"ML transpilation failed: {'; '.join(error_messages)}\")\nmlpy.runtime.sandbox.sandbox.SandboxError: ML transpilation failed: \n"
        },
        "stdout": "",
        "stderr": "ML transpilation failed: "
      },
      "error_message": null,
      "threat_count": 0
    },
    {
      "test_case": {
        "name": "edge_cases::unicode_attacks",
        "file_path": "C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\edge_cases\\unicode_attacks.ml",
        "category": "edge_cases",
        "expected_threats": 0,
        "should_transpile": true,
        "should_execute": true,
        "description": "Unicode handling test program (corrected ML syntax - safe version)"
      },
      "result": "TestResult.PASS",
      "execution_time_ms": 15.863180160522461,
      "security_analysis": {
        "pattern_matches": 0,
        "ast_violations": 0,
        "data_flow_violations": 0,
        "total_threats": 0,
        "analysis_time_ms": 1.0695457458496094
      },
      "transpilation_result": [
        "\"\"\"Generated Python code from mlpy ML transpiler.\"\"\"\n\n# This code was automatically generated from ML source\n# Modifications to this file may be lost on regeneration\n\n# ML Standard Library imports\nfrom mlpy.stdlib import console, getCurrentTime, processData\n\ndef processText(input):\n    cleaned = (input + '_processed')\n    return cleaned\n\ndef normalizeString(text):\n    if (text == 'test'):\n        return 'normalized_test'\n    else:\n        return (text + '_normalized')\n\nresult1 = processText('hello_world')\n\nresult2 = normalizeString('test')\n\nresult3 = normalizeString('unicode_text')\n\n# End of generated code",
        [],
        {
          "version": 3,
          "file": "generated.py",
          "sourceRoot": "",
          "sources": [
            "unknown.ml"
          ],
          "names": [],
          "mappings": "[]",
          "sourcesContent": [
            null
          ]
        }
      ],
      "execution_result": {
        "success": true,
        "result": {
          "success": false,
          "return_value": null,
          "stdout": "",
          "stderr": "ML transpilation failed: ",
          "exit_code": 0,
          "execution_time": 0.004846334457397461,
          "memory_usage": 0,
          "cpu_usage": 0.0,
          "capability_violations": [],
          "security_warnings": [],
          "error": "ML transpilation failed: ",
          "error_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 194, in execute\n    python_code = self._transpile_ml_code(ml_code)\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 232, in _transpile_ml_code\n    raise SandboxError(f\"ML transpilation failed: {'; '.join(error_messages)}\")\nmlpy.runtime.sandbox.sandbox.SandboxError: ML transpilation failed: \n"
        },
        "stdout": "",
        "stderr": "ML transpilation failed: "
      },
      "error_message": null,
      "threat_count": 0
    },
    {
      "test_case": {
        "name": "language_coverage::basic_features",
        "file_path": "C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\language_coverage\\basic_features.ml",
        "category": "language_coverage",
        "expected_threats": 0,
        "should_transpile": true,
        "should_execute": true,
        "description": "Variables and basic types test program (corrected ML syntax)"
      },
      "result": "TestResult.PASS",
      "execution_time_ms": 20.644187927246094,
      "security_analysis": {
        "pattern_matches": 0,
        "ast_violations": 0,
        "data_flow_violations": 0,
        "total_threats": 0,
        "analysis_time_ms": 1.5592575073242188
      },
      "transpilation_result": [
        "\"\"\"Generated Python code from mlpy ML transpiler.\"\"\"\n\n# This code was automatically generated from ML source\n# Modifications to this file may be lost on regeneration\n\n# ML Standard Library imports\nfrom mlpy.stdlib import console, getCurrentTime, processData\n\nnumber = 42\n\ntext = 'Hello World'\n\nboolean = True\n\narray = [1, 2, 3, 4, 5]\n\ndef add(a, b):\n    return (a + b)\n\ndef factorial(n):\n    if (n == 1):\n        return 1\n    else:\n        return (n * factorial((n - 1)))\n\nresult1 = add(10, 20)\n\nresult2 = factorial(5)\n\nsum = (10 + 20)\n\ndifference = (50 - 30)\n\nproduct = (6 * 7)\n\nquotient = (84 / 2)\n\n# End of generated code",
        [],
        {
          "version": 3,
          "file": "generated.py",
          "sourceRoot": "",
          "sources": [
            "unknown.ml"
          ],
          "names": [],
          "mappings": "[]",
          "sourcesContent": [
            null
          ]
        }
      ],
      "execution_result": {
        "success": true,
        "result": {
          "success": false,
          "return_value": null,
          "stdout": "",
          "stderr": "ML transpilation failed: ",
          "exit_code": 0,
          "execution_time": 0.0037331581115722656,
          "memory_usage": 0,
          "cpu_usage": 0.0,
          "capability_violations": [],
          "security_warnings": [],
          "error": "ML transpilation failed: ",
          "error_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 194, in execute\n    python_code = self._transpile_ml_code(ml_code)\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 232, in _transpile_ml_code\n    raise SandboxError(f\"ML transpilation failed: {'; '.join(error_messages)}\")\nmlpy.runtime.sandbox.sandbox.SandboxError: ML transpilation failed: \n"
        },
        "stdout": "",
        "stderr": "ML transpilation failed: "
      },
      "error_message": null,
      "threat_count": 0
    },
    {
      "test_case": {
        "name": "language_coverage::control_flow",
        "file_path": "C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\language_coverage\\control_flow.ml",
        "category": "language_coverage",
        "expected_threats": 0,
        "should_transpile": true,
        "should_execute": true,
        "description": "Control flow structures test program (simplified ML syntax)"
      },
      "result": "TestResult.PASS",
      "execution_time_ms": 16.164302825927734,
      "security_analysis": {
        "pattern_matches": 0,
        "ast_violations": 0,
        "data_flow_violations": 0,
        "total_threats": 0,
        "analysis_time_ms": 1.0421276092529297
      },
      "transpilation_result": [
        "\"\"\"Generated Python code from mlpy ML transpiler.\"\"\"\n\n# This code was automatically generated from ML source\n# Modifications to this file may be lost on regeneration\n\n# ML Standard Library imports\nfrom mlpy.stdlib import console, getCurrentTime, processData\n\ndef processNumber(n):\n    if (n > 10):\n        result = (n * 2)\n        return result\n    else:\n        return (n + 5)\n\ndef countUp(start):\n    i = start\n    while (i < 5):\n        i = (i + 1)\n    return i\n\nresult1 = processNumber(15)\n\nresult2 = processNumber(3)\n\ncount = countUp(0)\n\n# End of generated code",
        [],
        {
          "version": 3,
          "file": "generated.py",
          "sourceRoot": "",
          "sources": [
            "unknown.ml"
          ],
          "names": [],
          "mappings": "[]",
          "sourcesContent": [
            null
          ]
        }
      ],
      "execution_result": {
        "success": true,
        "result": {
          "success": false,
          "return_value": null,
          "stdout": "",
          "stderr": "ML transpilation failed: ",
          "exit_code": 0,
          "execution_time": 0.0041234493255615234,
          "memory_usage": 0,
          "cpu_usage": 0.0,
          "capability_violations": [],
          "security_warnings": [],
          "error": "ML transpilation failed: ",
          "error_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 194, in execute\n    python_code = self._transpile_ml_code(ml_code)\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 232, in _transpile_ml_code\n    raise SandboxError(f\"ML transpilation failed: {'; '.join(error_messages)}\")\nmlpy.runtime.sandbox.sandbox.SandboxError: ML transpilation failed: \n"
        },
        "stdout": "",
        "stderr": "ML transpilation failed: "
      },
      "error_message": null,
      "threat_count": 0
    },
    {
      "test_case": {
        "name": "language_coverage::demo_functional_power",
        "file_path": "C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\language_coverage\\demo_functional_power.ml",
        "category": "language_coverage",
        "expected_threats": 0,
        "should_transpile": true,
        "should_execute": true,
        "description": "Ultimate demonstration of ML's functional programming capabilities"
      },
      "result": "TestResult.PASS",
      "execution_time_ms": 120.14484405517578,
      "security_analysis": {
        "pattern_matches": 0,
        "ast_violations": 0,
        "data_flow_violations": 0,
        "total_threats": 0,
        "analysis_time_ms": 26.088237762451172
      },
      "transpilation_result": [
        "\"\"\"Generated Python code from mlpy ML transpiler.\"\"\"\n\n# This code was automatically generated from ML source\n# Modifications to this file may be lost on regeneration\n\n# ML Standard Library imports\nfrom mlpy.stdlib import console, getCurrentTime, processData\n\n# WARNING: Import 'functional' requires security review\n# import functional\n\nemployees = [{'name': 'Alice', 'age': 28, 'department': 'Engineering', 'salary': 95000, 'experience': 5}, {'name': 'Bob', 'age': 35, 'department': 'Sales', 'salary': 75000, 'experience': 10}, {'name': 'Carol', 'age': 42, 'department': 'Engineering', 'salary': 120000, 'experience': 15}, {'name': 'Dave', 'age': 29, 'department': 'Marketing', 'salary': 65000, 'experience': 6}, {'name': 'Eve', 'age': 31, 'department': 'Engineering', 'salary': 88000, 'experience': 7}, {'name': 'Frank', 'age': 38, 'department': 'Sales', 'salary': 82000, 'experience': 12}, {'name': 'Grace', 'age': 26, 'department': 'Engineering', 'salary': 78000, 'experience': 3}, {'name': 'Henry', 'age': 45, 'department': 'Management', 'salary': 150000, 'experience': 20}]\n\ntransactions = [{'id': 1, 'amount': 1200, 'type': 'income', 'category': 'salary', 'date': '2024-01'}, {'id': 2, 'amount': 450, 'type': 'expense', 'category': 'rent', 'date': '2024-01'}, {'id': 3, 'amount': 200, 'type': 'expense', 'category': 'groceries', 'date': '2024-01'}, {'id': 4, 'amount': 1200, 'type': 'income', 'category': 'salary', 'date': '2024-02'}, {'id': 5, 'amount': 450, 'type': 'expense', 'category': 'rent', 'date': '2024-02'}, {'id': 6, 'amount': 180, 'type': 'expense', 'category': 'groceries', 'date': '2024-02'}, {'id': 7, 'amount': 300, 'type': 'expense', 'category': 'entertainment', 'date': '2024-02'}]\n\ndef demonstrateBasicOperations():\n    ml_unknown_identifier_2782946866384('=== Basic Functional Operations ===')\n    numbers = ml_unknown_identifier_2782946867056(1, 21, 1)\n    doubled = ml_unknown_identifier_2782933184784(# UNKNOWN_EXPRESSION: FunctionDefinition, numbers)\n    evens = ml_unknown_identifier_2782932243792(# UNKNOWN_EXPRESSION: FunctionDefinition, numbers)\n    sum = ml_unknown_identifier_2782932244176(# UNKNOWN_EXPRESSION: FunctionDefinition, 0, evens)\n    ml_unknown_identifier_2782934256816('Numbers 1-20:', numbers)\n    ml_unknown_identifier_2782934256992('Doubled:', doubled)\n    ml_unknown_identifier_2782934249584('Even numbers:', evens)\n    ml_unknown_identifier_2782934249264('Sum of evens:', sum)\n    firstBigNumber = ml_unknown_identifier_2782933301824(# UNKNOWN_EXPRESSION: FunctionDefinition, numbers)\n    hasBigNumbers = ml_unknown_identifier_2782947467344(# UNKNOWN_EXPRESSION: FunctionDefinition, numbers)\n    allPositive = ml_unknown_identifier_2782947466960(# UNKNOWN_EXPRESSION: FunctionDefinition, numbers)\n    ml_unknown_identifier_2782946956176('First number > 15:', firstBigNumber)\n    ml_unknown_identifier_2782946956400('Has numbers > 15:', hasBigNumbers)\n    ml_unknown_identifier_2782946956624('All positive:', allPositive)\n    ml_unknown_identifier_2782946956848()\n\ndef demonstrateComposition():\n    ml_unknown_identifier_2782946957072('=== Function Composition Mastery ===')\n    isEven = # UNKNOWN_EXPRESSION: FunctionDefinition\n    square = # UNKNOWN_EXPRESSION: FunctionDefinition\n    double = # UNKNOWN_EXPRESSION: FunctionDefinition\n    sum = ml_unknown_identifier_2782946958528(functional['reduce'], # UNKNOWN_EXPRESSION: FunctionDefinition, 0)\n    sumOfSquaredEvens = ml_unknown_identifier_2782946959424(ml_unknown_identifier_2782946959536(functional['filter'], isEven), ml_unknown_identifier_2782946959872(functional['map'], square), sum)\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    result = sumOfSquaredEvens(numbers)\n    ml_unknown_identifier_2782946960768('Sum of squared evens:', result)\n    complexTransform = ml_unknown_identifier_2782946960992([# UNKNOWN_EXPRESSION: FunctionDefinition, square, double])\n    transformed = complexTransform(5)\n    ml_unknown_identifier_2782946961888('Complex transform(5):', transformed)\n    add = # UNKNOWN_EXPRESSION: FunctionDefinition\n    curriedAdd = ml_unknown_identifier_2782946962672(add)\n    add10 = curriedAdd(10)\n    results = ml_unknown_identifier_2782946963232(add10, [1, 2, 3, 4, 5])\n    ml_unknown_identifier_2782946963568('Add 10 to each:', results)\n    ml_unknown_identifier_2782946963792()\n\ndef demonstrateDataProcessing():\n    ml_unknown_identifier_2782946964128('=== Advanced Data Processing ===')\n    engineeringAnalysis = ml_unknown_identifier_2782946964352(ml_unknown_identifier_2782946964464(functional['filter'], # UNKNOWN_EXPRESSION: FunctionDefinition), # UNKNOWN_EXPRESSION: FunctionDefinition)\n    engStats = engineeringAnalysis(employees)\n    ml_unknown_identifier_2782946430880('Engineering Department Analysis:', engStats)\n    experienceLevels = ml_unknown_identifier_2782946431104(# UNKNOWN_EXPRESSION: FunctionDefinition, employees)\n    ml_unknown_identifier_2782946432112('Employees by experience level:', experienceLevels)\n    salaryPartition = ml_unknown_identifier_2782946432336(# UNKNOWN_EXPRESSION: FunctionDefinition, employees)\n    ml_unknown_identifier_2782946433120('High/Low salary partition:')\n    ml_unknown_identifier_2782946433344('  High earners:', ml_unknown_identifier_2782946433456(# UNKNOWN_EXPRESSION: FunctionDefinition, salaryPartition[0]))\n    ml_unknown_identifier_2782946434128('  Lower earners:', ml_unknown_identifier_2782946434240(# UNKNOWN_EXPRESSION: FunctionDefinition, salaryPartition[1]))\n    ml_unknown_identifier_2782946434912()\n\ndef demonstrateFinancialAnalysis():\n    ml_unknown_identifier_2782946435248('=== Financial Data Analysis ===')\n    monthlyAnalysis = ml_unknown_identifier_2782946435472(ml_unknown_identifier_2782946435584(functional['groupBy'], # UNKNOWN_EXPRESSION: FunctionDefinition), # UNKNOWN_EXPRESSION: FunctionDefinition)\n    financialSummary = monthlyAnalysis(transactions)\n    ml_unknown_identifier_2782946440960('Monthly Financial Analysis:', financialSummary)\n    expensesByCategory = ml_unknown_identifier_2782946441184(ml_unknown_identifier_2782946441296(functional['filter'], # UNKNOWN_EXPRESSION: FunctionDefinition), ml_unknown_identifier_2782946442080(functional['groupBy'], # UNKNOWN_EXPRESSION: FunctionDefinition), # UNKNOWN_EXPRESSION: FunctionDefinition)\n    expenseAnalysis = expensesByCategory(transactions)\n    ml_unknown_identifier_2782946117792('Expense Analysis by Category:', expenseAnalysis)\n    ml_unknown_identifier_2782946118016()\n\ndef demonstrateConditionalLogic():\n    ml_unknown_identifier_2782946118464('=== Conditional Logic Mastery ===')\n    evaluateEmployee = ml_unknown_identifier_2782946118800(# UNKNOWN_EXPRESSION: FunctionDefinition, # UNKNOWN_EXPRESSION: FunctionDefinition, ml_unknown_identifier_2782946119808(# UNKNOWN_EXPRESSION: FunctionDefinition, # UNKNOWN_EXPRESSION: FunctionDefinition, # UNKNOWN_EXPRESSION: FunctionDefinition))\n    evaluations = ml_unknown_identifier_2782946121600(evaluateEmployee, employees)\n    ml_unknown_identifier_2782946121936('Employee Evaluations:', evaluations)\n    adjustSalary = ml_unknown_identifier_2782946122160([[# UNKNOWN_EXPRESSION: FunctionDefinition, # UNKNOWN_EXPRESSION: FunctionDefinition], [# UNKNOWN_EXPRESSION: FunctionDefinition, # UNKNOWN_EXPRESSION: FunctionDefinition], [# UNKNOWN_EXPRESSION: FunctionDefinition, # UNKNOWN_EXPRESSION: FunctionDefinition], [ml_unknown_identifier_2782946125296(True), # UNKNOWN_EXPRESSION: FunctionDefinition]])\n    salaryAdjustments = ml_unknown_identifier_2782946126192(# UNKNOWN_EXPRESSION: FunctionDefinition, employees)\n    ml_unknown_identifier_2782946127536('Salary Adjustments:', salaryAdjustments)\n    ml_unknown_identifier_2782946127760()\n\ndef demonstrateUtilityFunctions():\n    ml_unknown_identifier_2782946128096('=== Utility Function Showcase ===')\n    testRanges = [ml_unknown_identifier_2782946128320(1, 11, 1), ml_unknown_identifier_2782946128544(0, 101, 10), ml_unknown_identifier_2782946128768(100, 0, 5)]\n    ml_unknown_identifier_2782946129104('Generated ranges:', testRanges)\n    greetings = ml_unknown_identifier_2782946129328('Hello', 3)\n    factorials = ml_unknown_identifier_2782946129664(# UNKNOWN_EXPRESSION: FunctionDefinition, 6)\n    ml_unknown_identifier_2782946131232('Repeated greetings:', greetings)\n    ml_unknown_identifier_2782946131456('First 6 factorials:', factorials)\n    letters = ['a', 'b', 'c', 'd', 'e']\n    numbers = [1, 2, 3, 4, 5]\n    zipped = ml_unknown_identifier_2782946066512(letters, numbers)\n    zipSum = ml_unknown_identifier_2782946066848(# UNKNOWN_EXPRESSION: FunctionDefinition, letters, numbers)\n    ml_unknown_identifier_2782946067632('Zipped pairs:', zipped)\n    ml_unknown_identifier_2782946067856('Zip with concatenation:', zipSum)\n    longList = ml_unknown_identifier_2782946068080(1, 101, 1)\n    first10 = ml_unknown_identifier_2782946068416(10, longList)\n    last10 = ml_unknown_identifier_2782946068752(10, ml_unknown_identifier_2782946068864(90, longList))\n    takeWhileSmall = ml_unknown_identifier_2782946069312(# UNKNOWN_EXPRESSION: FunctionDefinition, longList)\n    ml_unknown_identifier_2782946069984('First 10:', first10)\n    ml_unknown_identifier_2782946070208('Last 10:', last10)\n    ml_unknown_identifier_2782946070432('Take while < 50 (length):', ml_unknown_identifier_2782946070544(takeWhileSmall))\n    ml_unknown_identifier_2782946070880()\n\ndef demonstrateAdvancedComposition():\n    ml_unknown_identifier_2782946071216('=== Advanced Composition Patterns ===')\n    createDataProcessor = # UNKNOWN_EXPRESSION: FunctionDefinition\n    sumSquaredEvens = createDataProcessor(# UNKNOWN_EXPRESSION: FunctionDefinition, # UNKNOWN_EXPRESSION: FunctionDefinition, ml_unknown_identifier_2782946073680(functional['reduce'], # UNKNOWN_EXPRESSION: FunctionDefinition, 0))\n    productOddDoubles = createDataProcessor(# UNKNOWN_EXPRESSION: FunctionDefinition, # UNKNOWN_EXPRESSION: FunctionDefinition, ml_unknown_identifier_2782946075472(functional['reduce'], # UNKNOWN_EXPRESSION: FunctionDefinition, 1))\n    testNumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    ml_unknown_identifier_2782946076592('Sum of squared evens:', sumSquaredEvens(testNumbers))\n    ml_unknown_identifier_2782946076928('Product of doubled odds:', productOddDoubles(testNumbers))\n    analyzeNumber = ml_unknown_identifier_2782946077264([# UNKNOWN_EXPRESSION: FunctionDefinition, # UNKNOWN_EXPRESSION: FunctionDefinition, # UNKNOWN_EXPRESSION: FunctionDefinition, # UNKNOWN_EXPRESSION: FunctionDefinition])\n    analysis = analyzeNumber(7)\n    ml_unknown_identifier_2782946079280('Multi-analysis of 7:', analysis)\n    ml_unknown_identifier_2782946079504()\n\ndef runFunctionalProgrammingMasterclass():\n    ml_unknown_identifier_2782946079840('===========================================================')\n    ml_unknown_identifier_2782946080176('ML FUNCTIONAL PROGRAMMING MASTERCLASS')\n    ml_unknown_identifier_2782946080400('Demonstrating the Full Power of Functional Programming in ML')\n    ml_unknown_identifier_2782946080736('===========================================================')\n    ml_unknown_identifier_2782946081072()\n    demonstrateBasicOperations()\n    demonstrateComposition()\n    demonstrateDataProcessing()\n    demonstrateFinancialAnalysis()\n    demonstrateConditionalLogic()\n    demonstrateUtilityFunctions()\n    demonstrateAdvancedComposition()\n    ml_unknown_identifier_2782946082080('===========================================================')\n    ml_unknown_identifier_2782946082416('FUNCTIONAL PROGRAMMING MASTERCLASS COMPLETE!')\n    ml_unknown_identifier_2782946082640('===========================================================')\n    ml_unknown_identifier_2782946033968()\n    ml_unknown_identifier_2782946034192('ML now provides:')\n    ml_unknown_identifier_2782946034416('\u2713 Complete higher-order function suite')\n    ml_unknown_identifier_2782946034640('\u2713 Advanced function composition capabilities')\n    ml_unknown_identifier_2782946034864('\u2713 Powerful data transformation operations')\n    ml_unknown_identifier_2782946035088('\u2713 Elegant conditional logic handling')\n    ml_unknown_identifier_2782946035312('\u2713 Rich utility function library')\n    ml_unknown_identifier_2782946035536('\u2713 Security-integrated Python bridges')\n    ml_unknown_identifier_2782946035760('\u2713 Production-ready performance optimizations')\n    ml_unknown_identifier_2782946035984()\n    ml_unknown_identifier_2782946036208('ML functional programming is now on par with Haskell,')\n    ml_unknown_identifier_2782946036432('Ramda, and other leading functional programming environments!')\n    return {'masterclass': 'completed', 'functional_paradigm': 'fully_supported', 'operations_demonstrated': 50, 'complexity_level': 'enterprise_ready', 'ml_fp_status': 'production_ready'}\n\nmasterclassResults = runFunctionalProgrammingMasterclass()\n\ndef ultimateFunctionalDemo():\n    ml_unknown_identifier_2782946037216('\\\\n=== ULTIMATE FUNCTIONAL PROGRAMMING DEMONSTRATION ===')\n    ultimateProcessor = ml_unknown_identifier_2782946037440([# UNKNOWN_EXPRESSION: FunctionDefinition, # UNKNOWN_EXPRESSION: FunctionDefinition, # UNKNOWN_EXPRESSION: FunctionDefinition, ml_unknown_identifier_2782946046848(functional['groupBy'], # UNKNOWN_EXPRESSION: FunctionDefinition), ml_unknown_identifier_2782946047520(functional['filter'], # UNKNOWN_EXPRESSION: FunctionDefinition)])\n    ultimateResult = ultimateProcessor(employees)\n    ml_unknown_identifier_2782946049088('ULTIMATE RESULT:', ultimateResult)\n    ml_unknown_identifier_2782946049312('\\\\n\ud83c\udf89 ML FUNCTIONAL PROGRAMMING: MISSION ACCOMPLISHED! \ud83c\udf89')\n\nultimateFunctionalDemo()\n\n# End of generated code",
        [],
        {
          "version": 3,
          "file": "generated.py",
          "sourceRoot": "",
          "sources": [
            "unknown.ml"
          ],
          "names": [],
          "mappings": "[]",
          "sourcesContent": [
            null
          ]
        }
      ],
      "execution_result": {
        "success": true,
        "result": {
          "success": false,
          "return_value": null,
          "stdout": "",
          "stderr": "ML transpilation failed: ",
          "exit_code": 0,
          "execution_time": 0.0054128170013427734,
          "memory_usage": 0,
          "cpu_usage": 0.0,
          "capability_violations": [],
          "security_warnings": [],
          "error": "ML transpilation failed: ",
          "error_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 194, in execute\n    python_code = self._transpile_ml_code(ml_code)\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 232, in _transpile_ml_code\n    raise SandboxError(f\"ML transpilation failed: {'; '.join(error_messages)}\")\nmlpy.runtime.sandbox.sandbox.SandboxError: ML transpilation failed: \n"
        },
        "stdout": "",
        "stderr": "ML transpilation failed: "
      },
      "error_message": null,
      "threat_count": 0
    },
    {
      "test_case": {
        "name": "language_coverage::functional_programming",
        "file_path": "C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\language_coverage\\functional_programming.ml",
        "category": "language_coverage",
        "expected_threats": 0,
        "should_transpile": true,
        "should_execute": true,
        "description": "Functional programming patterns test program (ML syntax)"
      },
      "result": "TestResult.PASS",
      "execution_time_ms": 23.6666202545166,
      "security_analysis": {
        "pattern_matches": 0,
        "ast_violations": 0,
        "data_flow_violations": 0,
        "total_threats": 0,
        "analysis_time_ms": 2.042531967163086
      },
      "transpilation_result": [
        "\"\"\"Generated Python code from mlpy ML transpiler.\"\"\"\n\n# This code was automatically generated from ML source\n# Modifications to this file may be lost on regeneration\n\n# ML Standard Library imports\nfrom mlpy.stdlib import console, getCurrentTime, processData\n\ndef createMultiplier(factor):\n    def multiply(value):\n        return (value * factor)\n    return multiply\n\ndef applyOperation(value, operation):\n    return operation(value)\n\ndef processNumbers(numbers):\n    double = createMultiplier(2)\n    result1 = applyOperation(numbers[0], double)\n    result2 = applyOperation(numbers[1], double)\n    result3 = applyOperation(numbers[2], double)\n    return [result1, result2, result3]\n\ndef recursiveSum(arr, index):\n    if (index >= 3):\n        return 0\n    else:\n        return (arr[index] + recursiveSum(arr, (index + 1)))\n\nnumbers = [5, 10, 15]\n\ndoubled = processNumbers(numbers)\n\nsum = recursiveSum(numbers, 0)\n\n# End of generated code",
        [],
        {
          "version": 3,
          "file": "generated.py",
          "sourceRoot": "",
          "sources": [
            "unknown.ml"
          ],
          "names": [],
          "mappings": "[]",
          "sourcesContent": [
            null
          ]
        }
      ],
      "execution_result": {
        "success": true,
        "result": {
          "success": false,
          "return_value": null,
          "stdout": "",
          "stderr": "ML transpilation failed: ",
          "exit_code": 0,
          "execution_time": 0.005636453628540039,
          "memory_usage": 0,
          "cpu_usage": 0.0,
          "capability_violations": [],
          "security_warnings": [],
          "error": "ML transpilation failed: ",
          "error_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 194, in execute\n    python_code = self._transpile_ml_code(ml_code)\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 232, in _transpile_ml_code\n    raise SandboxError(f\"ML transpilation failed: {'; '.join(error_messages)}\")\nmlpy.runtime.sandbox.sandbox.SandboxError: ML transpilation failed: \n"
        },
        "stdout": "",
        "stderr": "ML transpilation failed: "
      },
      "error_message": null,
      "threat_count": 0
    },
    {
      "test_case": {
        "name": "language_coverage::object_oriented",
        "file_path": "C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\language_coverage\\object_oriented.ml",
        "category": "language_coverage",
        "expected_threats": 0,
        "should_transpile": true,
        "should_execute": true,
        "description": "Object-style programming test program (ML syntax - no classes)"
      },
      "result": "TestResult.PASS",
      "execution_time_ms": 44.65603828430176,
      "security_analysis": {
        "pattern_matches": 0,
        "ast_violations": 0,
        "data_flow_violations": 0,
        "total_threats": 0,
        "analysis_time_ms": 2.3386478424072266
      },
      "transpilation_result": [
        "\"\"\"Generated Python code from mlpy ML transpiler.\"\"\"\n\n# This code was automatically generated from ML source\n# Modifications to this file may be lost on regeneration\n\n# ML Standard Library imports\nfrom mlpy.stdlib import console, getCurrentTime, processData\n\ndef createAnimal(name, species):\n    animal = {}\n    animal['name'] = name\n    animal['species'] = species\n    animal['energy'] = 100\n    return animal\n\ndef animalSpeak(animal):\n    return (animal['name'] + ' makes a sound')\n\ndef animalMove(animal):\n    animal['energy'] = (animal['energy'] - 10)\n    return (animal['name'] + ' moves')\n\ndef createDog(name, breed):\n    dog = createAnimal(name, 'Canis lupus')\n    dog['breed'] = breed\n    dog['loyalty'] = 100\n    return dog\n\ndef dogSpeak(dog):\n    return (dog['name'] + ' barks: Woof!')\n\ndef dogFetch(dog, item):\n    dog['energy'] = (dog['energy'] - 15)\n    dog['loyalty'] = (dog['loyalty'] + 5)\n    return ((dog['name'] + ' fetches ') + item)\n\nbuddy = createDog('Buddy', 'Golden Retriever')\n\nspeakResult = dogSpeak(buddy)\n\nfetchResult = dogFetch(buddy, 'ball')\n\nmoveResult = animalMove(buddy)\n\n# End of generated code",
        [],
        {
          "version": 3,
          "file": "generated.py",
          "sourceRoot": "",
          "sources": [
            "unknown.ml"
          ],
          "names": [],
          "mappings": "[]",
          "sourcesContent": [
            null
          ]
        }
      ],
      "execution_result": {
        "success": true,
        "result": {
          "success": false,
          "return_value": null,
          "stdout": "",
          "stderr": "ML transpilation failed: ",
          "exit_code": 0,
          "execution_time": 0.010210514068603516,
          "memory_usage": 0,
          "cpu_usage": 0.0,
          "capability_violations": [],
          "security_warnings": [],
          "error": "ML transpilation failed: ",
          "error_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 194, in execute\n    python_code = self._transpile_ml_code(ml_code)\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 232, in _transpile_ml_code\n    raise SandboxError(f\"ML transpilation failed: {'; '.join(error_messages)}\")\nmlpy.runtime.sandbox.sandbox.SandboxError: ML transpilation failed: \n"
        },
        "stdout": "",
        "stderr": "ML transpilation failed: "
      },
      "error_message": null,
      "threat_count": 0
    },
    {
      "test_case": {
        "name": "language_coverage::python_imports_demo",
        "file_path": "C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\language_coverage\\python_imports_demo.ml",
        "category": "language_coverage",
        "expected_threats": 0,
        "should_transpile": true,
        "should_execute": true,
        "description": "ML importing Python modules demonstration"
      },
      "result": "TestResult.PASS",
      "execution_time_ms": 43.78652572631836,
      "security_analysis": {
        "pattern_matches": 0,
        "ast_violations": 0,
        "data_flow_violations": 0,
        "total_threats": 0,
        "analysis_time_ms": 2.8116703033447266
      },
      "transpilation_result": [
        "\"\"\"Generated Python code from mlpy ML transpiler.\"\"\"\n\n# This code was automatically generated from ML source\n# Modifications to this file may be lost on regeneration\n\n# ML Standard Library imports\nfrom mlpy.stdlib import console, getCurrentTime, processData\n\nimport math\n\nimport json\n\nimport random\n\ndef mathOperations():\n    radius = 5.0\n    area = ((math['pi'] * radius) * radius)\n    sqrt_result = ml_unknown_identifier_2782946956400(25.0)\n    power_result = ml_unknown_identifier_2782946956848(2.0, 8.0)\n    return {'area': area, 'sqrt': sqrt_result, 'power': power_result, 'pi': math['pi'], 'e': math['e']}\n\ndef randomOperations():\n    random_float = ml_unknown_identifier_2782946956176()\n    random_choice = ml_unknown_identifier_2782946964016([1, 2, 3, 4, 5])\n    return {'random_float': random_float, 'choice': random_choice}\n\ndef jsonOperations():\n    data = {'name': 'ML Program', 'version': 1.0, 'active': True}\n    json_string = ml_unknown_identifier_2782946958304(data)\n    return {'original': data, 'serialized': json_string}\n\ndef combinedOperations():\n    math_result = mathOperations()\n    random_result = randomOperations()\n    json_result = jsonOperations()\n    final_result = {'math': math_result, 'random': random_result, 'json': json_result, 'timestamp': 'generated_by_ml'}\n    return final_result\n\n# End of generated code",
        [],
        {
          "version": 3,
          "file": "generated.py",
          "sourceRoot": "",
          "sources": [
            "unknown.ml"
          ],
          "names": [],
          "mappings": "[]",
          "sourcesContent": [
            null
          ]
        }
      ],
      "execution_result": {
        "success": true,
        "result": {
          "success": false,
          "return_value": null,
          "stdout": "",
          "stderr": "ML transpilation failed: ",
          "exit_code": 0,
          "execution_time": 0.009133100509643555,
          "memory_usage": 0,
          "cpu_usage": 0.0,
          "capability_violations": [],
          "security_warnings": [],
          "error": "ML transpilation failed: ",
          "error_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 194, in execute\n    python_code = self._transpile_ml_code(ml_code)\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 232, in _transpile_ml_code\n    raise SandboxError(f\"ML transpilation failed: {'; '.join(error_messages)}\")\nmlpy.runtime.sandbox.sandbox.SandboxError: ML transpilation failed: \n"
        },
        "stdout": "",
        "stderr": "ML transpilation failed: "
      },
      "error_message": null,
      "threat_count": 0
    },
    {
      "test_case": {
        "name": "language_coverage::test_functional_module",
        "file_path": "C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\language_coverage\\test_functional_module.ml",
        "category": "language_coverage",
        "expected_threats": 0,
        "should_transpile": true,
        "should_execute": true,
        "description": "Comprehensive test for ML Functional Programming Standard Library"
      },
      "result": "TestResult.PASS",
      "execution_time_ms": 136.64960861206055,
      "security_analysis": {
        "pattern_matches": 0,
        "ast_violations": 0,
        "data_flow_violations": 0,
        "total_threats": 0,
        "analysis_time_ms": 44.426918029785156
      },
      "transpilation_result": [
        "\"\"\"Generated Python code from mlpy ML transpiler.\"\"\"\n\n# This code was automatically generated from ML source\n# Modifications to this file may be lost on regeneration\n\n# ML Standard Library imports\nfrom mlpy.stdlib import console, getCurrentTime, processData\n\n# WARNING: Import 'functional' requires security review\n# import functional\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nwords = ['hello', 'world', 'functional', 'programming', 'ml']\n\npeople = [{'name': 'Alice', 'age': 25, 'department': 'Engineering'}, {'name': 'Bob', 'age': 30, 'department': 'Sales'}, {'name': 'Carol', 'age': 35, 'department': 'Engineering'}, {'name': 'Dave', 'age': 28, 'department': 'Marketing'}, {'name': 'Eve', 'age': 32, 'department': 'Engineering'}]\n\ndef isEven(n):\n    return ((n % 2) == 0)\n\ndef isOdd(n):\n    return ((n % 2) == 1)\n\ndef double(n):\n    return (n * 2)\n\ndef square(n):\n    return (n * n)\n\ndef add(a, b):\n    return (a + b)\n\ndef multiply(a, b):\n    return (a * b)\n\ndef isLongWord(word):\n    return (ml_unknown_identifier_2782946959984(word) > 5)\n\ndef getAge(person):\n    return person['age']\n\ndef getDepartment(person):\n    return person['department']\n\ndef isEngineer(person):\n    return (person['department'] == 'Engineering')\n\ndef testCoreOperations():\n    ml_unknown_identifier_2782946961776('=== Testing Core Functional Operations ===')\n    doubled = ml_unknown_identifier_2782946962000(double, numbers)\n    ml_unknown_identifier_2782946962448('Doubled numbers:', doubled)\n    squared = ml_unknown_identifier_2782946962112(square, numbers)\n    ml_unknown_identifier_2782946962784('Squared numbers:', squared)\n    evens = ml_unknown_identifier_2782946963120(isEven, numbers)\n    ml_unknown_identifier_2782946963344('Even numbers:', evens)\n    odds = ml_unknown_identifier_2782946963680(isOdd, numbers)\n    ml_unknown_identifier_2782946963792('Odd numbers:', odds)\n    longWords = ml_unknown_identifier_2782946964128(isLongWord, words)\n    ml_unknown_identifier_2782946965024('Long words:', longWords)\n    sum = ml_unknown_identifier_2782946964800(add, 0, numbers)\n    ml_unknown_identifier_2782946965920('Sum of numbers:', sum)\n    product = ml_unknown_identifier_2782946965696(multiply, 1, numbers)\n    ml_unknown_identifier_2782946965360('Product of numbers:', product)\n    sumOfSquaredEvens = ml_unknown_identifier_2782946966480(add, 0, ml_unknown_identifier_2782946966368(square, ml_unknown_identifier_2782946966256(isEven, numbers)))\n    ml_unknown_identifier_2782946967040('Sum of squared evens:', sumOfSquaredEvens)\n    ml_unknown_identifier_2782946966816()\n\ndef testSearchOperations():\n    ml_unknown_identifier_2782946965248('=== Testing Search and Selection Operations ===')\n    firstEven = ml_unknown_identifier_2782946049760(isEven, numbers)\n    ml_unknown_identifier_2782946033856('First even number:', firstEven)\n    firstEngineer = ml_unknown_identifier_2782946033968(isEngineer, people)\n    ml_unknown_identifier_2782946034528('First engineer:', firstEngineer['name'])\n    firstEvenIndex = ml_unknown_identifier_2782946034640(isEven, numbers)\n    ml_unknown_identifier_2782946035200('Index of first even:', firstEvenIndex)\n    hasEvens = ml_unknown_identifier_2782946035424(isEven, numbers)\n    ml_unknown_identifier_2782946035536('Has even numbers:', hasEvens)\n    hasLargeNumbers = ml_unknown_identifier_2782946035760(# UNKNOWN_EXPRESSION: FunctionDefinition, numbers)\n    ml_unknown_identifier_2782946036656('Has numbers > 100:', hasLargeNumbers)\n    allPositive = ml_unknown_identifier_2782946036768(# UNKNOWN_EXPRESSION: FunctionDefinition, numbers)\n    ml_unknown_identifier_2782946048752('All numbers positive:', allPositive)\n    allEven = ml_unknown_identifier_2782946038672(isEven, numbers)\n    ml_unknown_identifier_2782946038336('All numbers even:', allEven)\n    noNegative = ml_unknown_identifier_2782946038112(# UNKNOWN_EXPRESSION: FunctionDefinition, numbers)\n    ml_unknown_identifier_2782946042368('No negative numbers:', noNegative)\n    ml_unknown_identifier_2782946039904()\n\ndef testFunctionComposition():\n    ml_unknown_identifier_2782946039344('=== Testing Function Composition ===')\n    doubleAndSquare = ml_unknown_identifier_2782946039008(square, double)\n    result1 = doubleAndSquare(5)\n    ml_unknown_identifier_2782946041024('Compose double then square (5):', result1)\n    squareAndDouble = ml_unknown_identifier_2782946040688(square, double)\n    result2 = squareAndDouble(5)\n    ml_unknown_identifier_2782946040800('Pipe square then double (5):', result2)\n    identityResult = ml_unknown_identifier_2782946042256(42)\n    ml_unknown_identifier_2782946041920('Identity(42):', identityResult)\n    alwaysTrue = ml_unknown_identifier_2782946041696(True)\n    constantResult = alwaysTrue(99)\n    ml_unknown_identifier_2782946041136('Constant(true)(99):', constantResult)\n    subtract = # UNKNOWN_EXPRESSION: FunctionDefinition\n    flippedSubtract = ml_unknown_identifier_2782946043712(subtract)\n    normal = subtract(10, 3)\n    flipped = flippedSubtract(10, 3)\n    ml_unknown_identifier_2782946042928('Normal subtract(10, 3):', normal)\n    ml_unknown_identifier_2782946044048('Flipped subtract(10, 3):', flipped)\n    notEven = ml_unknown_identifier_2782946043824(isEven)\n    result3 = notEven(4)\n    result4 = notEven(5)\n    ml_unknown_identifier_2782946045280('Not even(4):', result3)\n    ml_unknown_identifier_2782946045056('Not even(5):', result4)\n    ml_unknown_identifier_2782946044720()\n\ndef testListProcessing():\n    ml_unknown_identifier_2782946044496('=== Testing List Processing Operations ===')\n    duplicateAndSquare = # UNKNOWN_EXPRESSION: FunctionDefinition\n    flatMapped = ml_unknown_identifier_2782946046624(duplicateAndSquare, [2, 3, 4])\n    ml_unknown_identifier_2782946047296('FlatMap duplicate and square:', flatMapped)\n    letters = ['a', 'b', 'c']\n    zipped = ml_unknown_identifier_2782946048528(numbers, letters)\n    ml_unknown_identifier_2782946048304('Zipped numbers and letters:', zipped)\n    addStrings = # UNKNOWN_EXPRESSION: FunctionDefinition\n    zippedWith = ml_unknown_identifier_2782946037440(addStrings, [1, 2, 3], ['a', 'b', 'c'])\n    ml_unknown_identifier_2782946049424('ZipWith add:', zippedWith)\n    partitioned = ml_unknown_identifier_2782946049648(isEven, numbers)\n    ml_unknown_identifier_2782946083120('Partitioned evens/odds:', partitioned)\n    peopleByDept = ml_unknown_identifier_2782946083344(getDepartment, people)\n    ml_unknown_identifier_2782946083680('People by department:', peopleByDept)\n    duplicates = [1, 2, 2, 3, 3, 3, 4, 5, 5]\n    uniqueNumbers = ml_unknown_identifier_2782946084128(duplicates)\n    ml_unknown_identifier_2782946084464('Unique numbers:', uniqueNumbers)\n    ml_unknown_identifier_2782946084688()\n\ndef testListSlicing():\n    ml_unknown_identifier_2782946085024('=== Testing List Slicing Operations ===')\n    firstFive = ml_unknown_identifier_2782946085248(5, numbers)\n    ml_unknown_identifier_2782946085584('Take first 5:', firstFive)\n    afterFive = ml_unknown_identifier_2782946085808(5, numbers)\n    ml_unknown_identifier_2782946086144('Drop first 5:', afterFive)\n    takeWhileSmall = ml_unknown_identifier_2782946086368(# UNKNOWN_EXPRESSION: FunctionDefinition, numbers)\n    ml_unknown_identifier_2782946087040('Take while < 6:', takeWhileSmall)\n    dropWhileSmall = ml_unknown_identifier_2782946087264(# UNKNOWN_EXPRESSION: FunctionDefinition, numbers)\n    ml_unknown_identifier_2782946087936('Drop while < 6:', dropWhileSmall)\n    ml_unknown_identifier_2782946088160()\n\ndef testConditionalOperations():\n    ml_unknown_identifier_2782946088496('=== Testing Conditional Operations ===')\n    evenOrOddMessage = ml_unknown_identifier_2782946088720(isEven, # UNKNOWN_EXPRESSION: FunctionDefinition, # UNKNOWN_EXPRESSION: FunctionDefinition)\n    ml_unknown_identifier_2782946089728('IfElse for 4:', evenOrOddMessage(4))\n    ml_unknown_identifier_2782946090064('IfElse for 7:', evenOrOddMessage(7))\n    doubleIfEven = ml_unknown_identifier_2782946090400(isEven, double)\n    ml_unknown_identifier_2782946090736('Double if even (4):', doubleIfEven(4))\n    ml_unknown_identifier_2782946091072('Double if even (5):', doubleIfEven(5))\n    doubleUnlessEven = ml_unknown_identifier_2782946091408(isEven, double)\n    ml_unknown_identifier_2782946091744('Double unless even (4):', doubleUnlessEven(4))\n    ml_unknown_identifier_2782946092080('Double unless even (5):', doubleUnlessEven(5))\n    numberCategory = ml_unknown_identifier_2782946092416([[# UNKNOWN_EXPRESSION: FunctionDefinition, # UNKNOWN_EXPRESSION: FunctionDefinition], [# UNKNOWN_EXPRESSION: FunctionDefinition, # UNKNOWN_EXPRESSION: FunctionDefinition], [# UNKNOWN_EXPRESSION: FunctionDefinition, # UNKNOWN_EXPRESSION: FunctionDefinition], [# UNKNOWN_EXPRESSION: FunctionDefinition, # UNKNOWN_EXPRESSION: FunctionDefinition], [ml_unknown_identifier_2782946095216(True), # UNKNOWN_EXPRESSION: FunctionDefinition]])\n    ml_unknown_identifier_2782946096112('Category of -5:', numberCategory(5))\n    ml_unknown_identifier_2782946096448('Category of 0:', numberCategory(0))\n    ml_unknown_identifier_2782946096784('Category of 5:', numberCategory(5))\n    ml_unknown_identifier_2782946097120('Category of 50:', numberCategory(50))\n    ml_unknown_identifier_2782946097456('Category of 500:', numberCategory(500))\n    ml_unknown_identifier_2782946097792()\n\ndef testUtilities():\n    ml_unknown_identifier_2782946098128('=== Testing Utility Functions ===')\n    range1to5 = ml_unknown_identifier_2782946098352(1, 6, 1)\n    ml_unknown_identifier_2782946098688('Range 1 to 5:', range1to5)\n    evenRange = ml_unknown_identifier_2782946098912(0, 11, 2)\n    ml_unknown_identifier_2782946017472('Even range 0 to 10:', evenRange)\n    repeated = ml_unknown_identifier_2782946017696('hello', 3)\n    ml_unknown_identifier_2782946018032(\"Repeat 'hello' 3 times:\", repeated)\n    squares = ml_unknown_identifier_2782946018256(square, 5)\n    ml_unknown_identifier_2782946018592('Squares of indices 0-4:', squares)\n    ml_unknown_identifier_2782946018816()\n\ndef advancedFunctionalDemo():\n    ml_unknown_identifier_2782946019152('=== Advanced Functional Programming Demo ===')\n    ml_unknown_identifier_2782946019376('Processing employee data with FP pipeline:')\n    engineeringStats = ml_unknown_identifier_2782946019600(ml_unknown_identifier_2782946019712(functional['filter'], isEngineer), ml_unknown_identifier_2782946020048(functional['map'], getAge), # UNKNOWN_EXPRESSION: FunctionDefinition)\n    avgEngineerAge = engineeringStats(people)\n    ml_unknown_identifier_2782946021728('Average engineer age:', avgEngineerAge)\n    analyzeNumbers = ml_unknown_identifier_2782946021952([# UNKNOWN_EXPRESSION: FunctionDefinition, # UNKNOWN_EXPRESSION: FunctionDefinition, # UNKNOWN_EXPRESSION: FunctionDefinition, functional['identity']])\n    analysis = analyzeNumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    ml_unknown_identifier_2782946026096('Number analysis:', analysis)\n    ml_unknown_identifier_2782946026320()\n\ndef runAllTests():\n    ml_unknown_identifier_2782946026656('======================================================')\n    ml_unknown_identifier_2782946026880('ML FUNCTIONAL PROGRAMMING STANDARD LIBRARY TESTS')\n    ml_unknown_identifier_2782946027104('======================================================')\n    ml_unknown_identifier_2782946027328()\n    testCoreOperations()\n    testSearchOperations()\n    testFunctionComposition()\n    testListProcessing()\n    testListSlicing()\n    testConditionalOperations()\n    testUtilities()\n    advancedFunctionalDemo()\n    ml_unknown_identifier_2782946028448('======================================================')\n    ml_unknown_identifier_2782946028672('ALL FUNCTIONAL PROGRAMMING TESTS COMPLETED!')\n    ml_unknown_identifier_2782946028896('======================================================')\n    return {'test_status': 'completed', 'module': 'functional', 'features_tested': ['map, filter, reduce', 'find, some, every, none', 'compose, pipe, curry', 'zip, partition, groupBy, unique', 'take, drop, takeWhile, dropWhile', 'ifElse, when, unless, cond', 'range, repeat, times', 'advanced composition and pipelines'], 'total_operations': 50, 'functional_paradigm': 'fully_supported'}\n\ntestResults = runAllTests()\n\ndef createDataPipeline():\n    processEmployeeData = ml_unknown_identifier_2782946029680([ml_unknown_identifier_2782946029792(functional['filter'], # UNKNOWN_EXPRESSION: FunctionDefinition), ml_unknown_identifier_2782946030912(functional['map'], # UNKNOWN_EXPRESSION: FunctionDefinition), ml_unknown_identifier_2782946032144(functional['groupBy'], # UNKNOWN_EXPRESSION: FunctionDefinition), # UNKNOWN_EXPRESSION: FunctionDefinition])\n    result = processEmployeeData(people)\n    ml_unknown_identifier_2782946003328('Employee processing pipeline result:', result)\n    return result\n\nfinalDemo = createDataPipeline()\n\n# End of generated code",
        [],
        {
          "version": 3,
          "file": "generated.py",
          "sourceRoot": "",
          "sources": [
            "unknown.ml"
          ],
          "names": [],
          "mappings": "[]",
          "sourcesContent": [
            null
          ]
        }
      ],
      "execution_result": {
        "success": true,
        "result": {
          "success": false,
          "return_value": null,
          "stdout": "",
          "stderr": "ML transpilation failed: ",
          "exit_code": 0,
          "execution_time": 0.009760379791259766,
          "memory_usage": 0,
          "cpu_usage": 0.0,
          "capability_violations": [],
          "security_warnings": [],
          "error": "ML transpilation failed: ",
          "error_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 194, in execute\n    python_code = self._transpile_ml_code(ml_code)\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 232, in _transpile_ml_code\n    raise SandboxError(f\"ML transpilation failed: {'; '.join(error_messages)}\")\nmlpy.runtime.sandbox.sandbox.SandboxError: ML transpilation failed: \n"
        },
        "stdout": "",
        "stderr": "ML transpilation failed: "
      },
      "error_message": null,
      "threat_count": 0
    },
    {
      "test_case": {
        "name": "language_coverage::test_import_system",
        "file_path": "C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\language_coverage\\test_import_system.ml",
        "category": "language_coverage",
        "expected_threats": 0,
        "should_transpile": true,
        "should_execute": true,
        "description": "Comprehensive test for the new ML import system"
      },
      "result": "TestResult.PASS",
      "execution_time_ms": 65.44089317321777,
      "security_analysis": {
        "pattern_matches": 0,
        "ast_violations": 0,
        "data_flow_violations": 0,
        "total_threats": 0,
        "analysis_time_ms": 7.895946502685547
      },
      "transpilation_result": [
        "\"\"\"Generated Python code from mlpy ML transpiler.\"\"\"\n\n# This code was automatically generated from ML source\n# Modifications to this file may be lost on regeneration\n\n# ML Standard Library imports\nfrom mlpy.stdlib import console, getCurrentTime, processData\n\nimport math\n\nimport json\n\n# WARNING: Import 'string' requires security review\n# import string\n\nimport datetime\n\ndef testMathOperations():\n    radius = 5.0\n    area = ((math['pi'] * radius) * radius)\n    sqrt_result = ml_unknown_identifier_2782946957408(25.0)\n    power_result = ml_unknown_identifier_2782946957184(2.0, 8.0)\n    return {'pi': math['pi'], 'area': area, 'sqrt_25': sqrt_result, '2_pow_8': power_result, 'abs_negative': ml_unknown_identifier_2782946958304(42), 'min': ml_unknown_identifier_2782946957744(10, 20), 'max': ml_unknown_identifier_2782946959760(10, 20)}\n\ndef testStringOperations():\n    text = 'Hello, World!'\n    return {'original': text, 'uppercase': ml_unknown_identifier_2782946960320(text), 'lowercase': ml_unknown_identifier_2782946958752(text), 'length': ml_unknown_identifier_2782946959648(text), 'contains_world': ml_unknown_identifier_2782946960096(text, 'World'), 'starts_with_hello': ml_unknown_identifier_2782946959984(text, 'Hello'), 'stripped': ml_unknown_identifier_2782946960880('  spaced  '), 'replaced': ml_unknown_identifier_2782946960656(text, 'World', 'ML')}\n\ndef testJsonOperations():\n    data = {'name': 'ML Import Test', 'version': 2.0, 'features': ['imports', 'security', 'stdlib'], 'active': True}\n    json_string = ml_unknown_identifier_2782946961328(data)\n    parsed_back = ml_unknown_identifier_2782946961776(json_string)\n    return {'original': data, 'serialized': json_string, 'round_trip': parsed_back}\n\ndef testDateTimeOperations():\n    current_time = ml_unknown_identifier_2782946962448()\n    formatted = ml_unknown_identifier_2782946962112(current_time)\n    iso_format = ml_unknown_identifier_2782946963456(current_time)\n    future_time = ml_unknown_identifier_2782946963232(current_time, 24)\n    hours_diff = ml_unknown_identifier_2782946963568(current_time, future_time)\n    return {'current_timestamp': current_time, 'readable_format': formatted, 'iso_format': iso_format, 'future_timestamp': future_time, 'hours_difference': hours_diff, 'is_leap_year_2024': ml_unknown_identifier_2782946963792(2024)}\n\ndef runComprehensiveTest():\n    ml_unknown_identifier_2782946964912('Testing ML Import System...')\n    math_results = testMathOperations()\n    string_results = testStringOperations()\n    json_results = testJsonOperations()\n    datetime_results = testDateTimeOperations()\n    comprehensive_result = {'test_name': 'ML Import System Validation', 'status': 'success', 'results': {'math': math_results, 'string': string_results, 'json': json_results, 'datetime': datetime_results}, 'summary': {'total_tests': 4, 'stdlib_modules_tested': ['math', 'string', 'json', 'datetime'], 'security_validated': True, 'capability_system_integrated': True}}\n    return comprehensive_result\n\ntest_result = runComprehensiveTest()\n\ndef displayResults():\n    ml_unknown_identifier_2782946966480('=== ML Import System Test Results ===')\n    ml_unknown_identifier_2782946967040('Test Status:', test_result['status'])\n    ml_unknown_identifier_2782946964352('Modules Tested:', test_result['summary']['stdlib_modules_tested'])\n    ml_unknown_identifier_2782946036880('Total Tests:', test_result['summary']['total_tests'])\n    ml_unknown_identifier_2782946034192('\\\\n--- Math Operations ---')\n    ml_unknown_identifier_2782946033968('\u03c0 =', test_result['results']['math']['pi'])\n    ml_unknown_identifier_2782946034976('sqrt(25) =', test_result['results']['math']['sqrt_25'])\n    ml_unknown_identifier_2782946035312('2^8 =', test_result['results']['math']['2_pow_8'])\n    ml_unknown_identifier_2782946036544('abs(-42) =', test_result['results']['math']['abs_negative'])\n    ml_unknown_identifier_2782946035760('\\\\n--- String Operations ---')\n    ml_unknown_identifier_2782946036656('Original:', test_result['results']['string']['original'])\n    ml_unknown_identifier_2782946037104('Uppercase:', test_result['results']['string']['uppercase'])\n    ml_unknown_identifier_2782946038560('Length:', test_result['results']['string']['length'])\n    ml_unknown_identifier_2782946037664(\"Contains 'World':\", test_result['results']['string']['contains_world'])\n    ml_unknown_identifier_2782946040016('\\\\n--- JSON Operations ---')\n    ml_unknown_identifier_2782946039568('Serialized:', test_result['results']['json']['serialized'])\n    ml_unknown_identifier_2782946039680('Round-trip success:', (test_result['results']['json']['round_trip'] != null))\n    ml_unknown_identifier_2782946041024('\\\\n--- DateTime Operations ---')\n    ml_unknown_identifier_2782946040576('Current time:', test_result['results']['datetime']['readable_format'])\n    ml_unknown_identifier_2782946040800('ISO format:', test_result['results']['datetime']['iso_format'])\n    ml_unknown_identifier_2782946041920('Hours difference:', test_result['results']['datetime']['hours_difference'])\n    ml_unknown_identifier_2782946041360('Is 2024 leap year:', test_result['results']['datetime']['is_leap_year_2024'])\n    ml_unknown_identifier_2782946042704('\\\\n=== Test Complete ===')\n    return 'Import system test completed successfully!'\n\nfinal_message = displayResults()\n\n# End of generated code",
        [],
        {
          "version": 3,
          "file": "generated.py",
          "sourceRoot": "",
          "sources": [
            "unknown.ml"
          ],
          "names": [],
          "mappings": "[]",
          "sourcesContent": [
            null
          ]
        }
      ],
      "execution_result": {
        "success": true,
        "result": {
          "success": false,
          "return_value": null,
          "stdout": "",
          "stderr": "ML transpilation failed: ",
          "exit_code": 0,
          "execution_time": 0.009114742279052734,
          "memory_usage": 0,
          "cpu_usage": 0.0,
          "capability_violations": [],
          "security_warnings": [],
          "error": "ML transpilation failed: ",
          "error_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 194, in execute\n    python_code = self._transpile_ml_code(ml_code)\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 232, in _transpile_ml_code\n    raise SandboxError(f\"ML transpilation failed: {'; '.join(error_messages)}\")\nmlpy.runtime.sandbox.sandbox.SandboxError: ML transpilation failed: \n"
        },
        "stdout": "",
        "stderr": "ML transpilation failed: "
      },
      "error_message": null,
      "threat_count": 0
    }
  ]
}