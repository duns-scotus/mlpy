{
  "summary": {
    "total_tests": 12,
    "passed": 9,
    "failed": 3,
    "errors": 0,
    "success_rate": 0.75,
    "total_time_ms": 869.351863861084,
    "avg_time_ms": 72.44598865509033,
    "status": "NEEDS_WORK"
  },
  "categories": {
    "legitimate_programs": {
      "total": 2,
      "passed": 2,
      "failed": 0,
      "errors": 0
    },
    "malicious_programs": {
      "total": 4,
      "passed": 4,
      "failed": 0,
      "errors": 0
    },
    "edge_cases": {
      "total": 2,
      "passed": 1,
      "failed": 1,
      "errors": 0
    },
    "language_coverage": {
      "total": 4,
      "passed": 2,
      "failed": 2,
      "errors": 0
    }
  },
  "security_analysis": {
    "total_threats": 41,
    "malicious_detected": 4,
    "malicious_total": 4
  },
  "detailed_results": [
    {
      "test_case": {
        "name": "legitimate_programs::data_analysis",
        "file_path": "C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\legitimate_programs\\data_analysis.ml",
        "category": "legitimate_programs",
        "expected_threats": 0,
        "should_transpile": true,
        "should_execute": true,
        "description": "Data analysis pipeline test program (corrected ML syntax)"
      },
      "result": "TestResult.PASS",
      "execution_time_ms": 697.1049308776855,
      "security_analysis": {
        "pattern_matches": 0,
        "ast_violations": 0,
        "data_flow_violations": 0,
        "total_threats": 0,
        "analysis_time_ms": 9.708404541015625
      },
      "transpilation_result": [
        "\"\"\"Generated Python code from mlpy ML transpiler.\"\"\"\n\n# This code was automatically generated from ML source\n# Modifications to this file may be lost on regeneration\n\ndef analyzeData(data):\n    sum = 0\n    count = 0\n    i = 0\n    while (i < 5):\n        value = data[i]\n        sum = (sum + value)\n        count = (count + 1)\n        i = (i + 1)\n    mean = (sum / count)\n    return mean\n\ndef processDataSet(dataset):\n    results = []\n    i = 0\n    while (i < 3):\n        item = dataset[i]\n        if (item > 10):\n            processed = (item * 2)\n        else:\n            results[i] = processed\n            results[i] = (item + 1)\n        i = (i + 1)\n    return results\n\ndef findMinMax(values):\n    min = values[0]\n    max = values[0]\n    i = 1\n    while (i < 4):\n        current = values[i]\n        if (current < min):\n            min = current\n        if (current > max):\n            max = current\n        i = (i + 1)\n    return [min, max]\n\nrawData = [1, 5, 10, 15, 20]\n\nmean = analyzeData(rawData)\n\nprocessed = processDataSet([3, 12, 8])\n\nminMax = findMinMax([4, 2, 9, 1])\n\n# End of generated code",
        [],
        {
          "version": 3,
          "file": "generated.py",
          "sourceRoot": "",
          "sources": [
            "unknown.ml"
          ],
          "names": [],
          "mappings": "[]",
          "sourcesContent": [
            null
          ]
        }
      ],
      "execution_result": {
        "success": true,
        "result": {
          "success": false,
          "return_value": null,
          "stdout": "",
          "stderr": "ML transpilation failed: ",
          "exit_code": 0,
          "execution_time": 0.31879472732543945,
          "memory_usage": 0,
          "cpu_usage": 0.0,
          "capability_violations": [],
          "security_warnings": [],
          "error": "ML transpilation failed: ",
          "error_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 194, in execute\n    python_code = self._transpile_ml_code(ml_code)\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 232, in _transpile_ml_code\n    raise SandboxError(f\"ML transpilation failed: {'; '.join(error_messages)}\")\nmlpy.runtime.sandbox.sandbox.SandboxError: ML transpilation failed: \n"
        },
        "stdout": "",
        "stderr": "ML transpilation failed: "
      },
      "error_message": null,
      "threat_count": 0
    },
    {
      "test_case": {
        "name": "legitimate_programs::web_scraper",
        "file_path": "C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\legitimate_programs\\web_scraper.ml",
        "category": "legitimate_programs",
        "expected_threats": 0,
        "should_transpile": true,
        "should_execute": true,
        "description": "Web scraper simulation test program (ML syntax)"
      },
      "result": "TestResult.PASS",
      "execution_time_ms": 20.765304565429688,
      "security_analysis": {
        "pattern_matches": 0,
        "ast_violations": 0,
        "data_flow_violations": 0,
        "total_threats": 0,
        "analysis_time_ms": 1.3420581817626953
      },
      "transpilation_result": [
        "\"\"\"Generated Python code from mlpy ML transpiler.\"\"\"\n\n# This code was automatically generated from ML source\n# Modifications to this file may be lost on regeneration\n\ndef createScraper(baseUrl):\n    scraper = {}\n    scraper.baseUrl = baseUrl\n    scraper.pageCount = 0\n    return scraper\n\ndef fetchPage(scraper, url):\n    response = {}\n    response.url = url\n    response.status = 200\n    response.body = ('Sample HTML content from ' + url)\n    return response\n\ndef extractData(response):\n    if (response.status == 200):\n        data = {}\n        data.url = response.url\n        data.content = response.body\n    else:\n        data.wordCount = 10\n        return data\n        return {}\n\ndef scrapePages(scraper, url1, url2):\n    result1 = fetchPage(scraper, url1)\n    result2 = fetchPage(scraper, url2)\n    data1 = extractData(result1)\n    data2 = extractData(result2)\n    scraper.pageCount = 2\n    return [data1, data2]\n\nscraper = createScraper('https://example.com')\n\nresults = scrapePages(scraper, 'https://example.com/page1', 'https://example.com/page2')\n\n# End of generated code",
        [],
        {
          "version": 3,
          "file": "generated.py",
          "sourceRoot": "",
          "sources": [
            "unknown.ml"
          ],
          "names": [],
          "mappings": "[]",
          "sourcesContent": [
            null
          ]
        }
      ],
      "execution_result": {
        "success": true,
        "result": {
          "success": false,
          "return_value": null,
          "stdout": "",
          "stderr": "ML transpilation failed: ",
          "exit_code": 0,
          "execution_time": 0.004785299301147461,
          "memory_usage": 0,
          "cpu_usage": 0.0,
          "capability_violations": [],
          "security_warnings": [],
          "error": "ML transpilation failed: ",
          "error_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 194, in execute\n    python_code = self._transpile_ml_code(ml_code)\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 232, in _transpile_ml_code\n    raise SandboxError(f\"ML transpilation failed: {'; '.join(error_messages)}\")\nmlpy.runtime.sandbox.sandbox.SandboxError: ML transpilation failed: \n"
        },
        "stdout": "",
        "stderr": "ML transpilation failed: "
      },
      "error_message": null,
      "threat_count": 0
    },
    {
      "test_case": {
        "name": "malicious_programs::code_injection",
        "file_path": "C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\malicious_programs\\code_injection.ml",
        "category": "malicious_programs",
        "expected_threats": 0,
        "should_transpile": false,
        "should_execute": false,
        "description": "Template injection vulnerabilities (corrected ML syntax)"
      },
      "result": "TestResult.PASS",
      "execution_time_ms": 3.039121627807617,
      "security_analysis": {
        "pattern_matches": 16,
        "ast_violations": 0,
        "data_flow_violations": 0,
        "total_threats": 16,
        "analysis_time_ms": 2.5458335876464844
      },
      "transpilation_result": null,
      "execution_result": null,
      "error_message": null,
      "threat_count": 16
    },
    {
      "test_case": {
        "name": "malicious_programs::data_flow_evasion",
        "file_path": "C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\malicious_programs\\data_flow_evasion.ml",
        "category": "malicious_programs",
        "expected_threats": 0,
        "should_transpile": false,
        "should_execute": false,
        "description": "Complex taint propagation paths (ML syntax with malicious patterns)"
      },
      "result": "TestResult.PASS",
      "execution_time_ms": 2.55584716796875,
      "security_analysis": {
        "pattern_matches": 10,
        "ast_violations": 0,
        "data_flow_violations": 0,
        "total_threats": 10,
        "analysis_time_ms": 1.6183853149414062
      },
      "transpilation_result": null,
      "execution_result": null,
      "error_message": null,
      "threat_count": 10
    },
    {
      "test_case": {
        "name": "malicious_programs::import_evasion",
        "file_path": "C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\malicious_programs\\import_evasion.ml",
        "category": "malicious_programs",
        "expected_threats": 0,
        "should_transpile": false,
        "should_execute": false,
        "description": "Dynamic import name construction (ML syntax with malicious patterns)"
      },
      "result": "TestResult.PASS",
      "execution_time_ms": 2.23541259765625,
      "security_analysis": {
        "pattern_matches": 2,
        "ast_violations": 0,
        "data_flow_violations": 0,
        "total_threats": 2,
        "analysis_time_ms": 1.3580322265625
      },
      "transpilation_result": null,
      "execution_result": null,
      "error_message": null,
      "threat_count": 2
    },
    {
      "test_case": {
        "name": "malicious_programs::reflection_evasion",
        "file_path": "C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\malicious_programs\\reflection_evasion.ml",
        "category": "malicious_programs",
        "expected_threats": 0,
        "should_transpile": false,
        "should_execute": false,
        "description": "Obfuscated reflection through string construction (corrected ML syntax)"
      },
      "result": "TestResult.PASS",
      "execution_time_ms": 2.3949146270751953,
      "security_analysis": {
        "pattern_matches": 7,
        "ast_violations": 0,
        "data_flow_violations": 0,
        "total_threats": 7,
        "analysis_time_ms": 1.7189979553222656
      },
      "transpilation_result": null,
      "execution_result": null,
      "error_message": null,
      "threat_count": 7
    },
    {
      "test_case": {
        "name": "edge_cases::deep_nesting",
        "file_path": "C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\edge_cases\\deep_nesting.ml",
        "category": "edge_cases",
        "expected_threats": 0,
        "should_transpile": true,
        "should_execute": true,
        "description": "Deep nesting structures test program (corrected ML syntax)"
      },
      "result": "TestResult.PASS",
      "execution_time_ms": 17.289400100708008,
      "security_analysis": {
        "pattern_matches": 0,
        "ast_violations": 0,
        "data_flow_violations": 0,
        "total_threats": 0,
        "analysis_time_ms": 1.0275840759277344
      },
      "transpilation_result": [
        "\"\"\"Generated Python code from mlpy ML transpiler.\"\"\"\n\n# This code was automatically generated from ML source\n# Modifications to this file may be lost on regeneration\n\ndef createNestedData(depth):\n    if (depth <= 0):\n        return 42\n    nested = createNestedData((depth - 1))\n    result = (nested + 1)\n    return result\n\ndef processDeepStructure(level):\n    if (level > 10):\n        innerValue = processDeepStructure((level - 1))\n    else:\n        return (innerValue * 2)\n        if (level > 5):\n            return (level + 100)\n        else:\n            return level\n\ndeepResult = createNestedData(20)\n\nprocessed = processDeepStructure(15)\n\n# End of generated code",
        [],
        {
          "version": 3,
          "file": "generated.py",
          "sourceRoot": "",
          "sources": [
            "unknown.ml"
          ],
          "names": [],
          "mappings": "[]",
          "sourcesContent": [
            null
          ]
        }
      ],
      "execution_result": {
        "success": true,
        "result": {
          "success": false,
          "return_value": null,
          "stdout": "",
          "stderr": "ML transpilation failed: ",
          "exit_code": 0,
          "execution_time": 0.004920482635498047,
          "memory_usage": 0,
          "cpu_usage": 0.0,
          "capability_violations": [],
          "security_warnings": [],
          "error": "ML transpilation failed: ",
          "error_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 194, in execute\n    python_code = self._transpile_ml_code(ml_code)\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 232, in _transpile_ml_code\n    raise SandboxError(f\"ML transpilation failed: {'; '.join(error_messages)}\")\nmlpy.runtime.sandbox.sandbox.SandboxError: ML transpilation failed: \n"
        },
        "stdout": "",
        "stderr": "ML transpilation failed: "
      },
      "error_message": null,
      "threat_count": 0
    },
    {
      "test_case": {
        "name": "edge_cases::unicode_attacks",
        "file_path": "C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\edge_cases\\unicode_attacks.ml",
        "category": "edge_cases",
        "expected_threats": 0,
        "should_transpile": true,
        "should_execute": true,
        "description": "Unicode handling test program (corrected ML syntax - safe version)"
      },
      "result": "TestResult.FAIL",
      "execution_time_ms": 1.1227130889892578,
      "security_analysis": {
        "pattern_matches": 2,
        "ast_violations": 0,
        "data_flow_violations": 0,
        "total_threats": 2,
        "analysis_time_ms": 0.7729530334472656
      },
      "transpilation_result": null,
      "execution_result": null,
      "error_message": "Unexpected threats detected in legitimate code: 2",
      "threat_count": 2
    },
    {
      "test_case": {
        "name": "language_coverage::basic_features",
        "file_path": "C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\language_coverage\\basic_features.ml",
        "category": "language_coverage",
        "expected_threats": 0,
        "should_transpile": true,
        "should_execute": true,
        "description": "Variables and basic types test program (corrected ML syntax)"
      },
      "result": "TestResult.PASS",
      "execution_time_ms": 29.08468246459961,
      "security_analysis": {
        "pattern_matches": 0,
        "ast_violations": 0,
        "data_flow_violations": 0,
        "total_threats": 0,
        "analysis_time_ms": 0.6704330444335938
      },
      "transpilation_result": [
        "\"\"\"Generated Python code from mlpy ML transpiler.\"\"\"\n\n# This code was automatically generated from ML source\n# Modifications to this file may be lost on regeneration\n\nnumber = 42\n\ntext = 'Hello World'\n\nboolean = true\n\narray = [1, 2, 3, 4, 5]\n\ndef add(a, b):\n    return (a + b)\n\ndef factorial(n):\n    if (n == 1):\n        return 1\n    else:\n        return (n * factorial((n - 1)))\n\nresult1 = add(10, 20)\n\nresult2 = factorial(5)\n\nsum = (10 + 20)\n\ndifference = (50 - 30)\n\nproduct = (6 * 7)\n\nquotient = (84 / 2)\n\n# End of generated code",
        [],
        {
          "version": 3,
          "file": "generated.py",
          "sourceRoot": "",
          "sources": [
            "unknown.ml"
          ],
          "names": [],
          "mappings": "[]",
          "sourcesContent": [
            null
          ]
        }
      ],
      "execution_result": {
        "success": true,
        "result": {
          "success": false,
          "return_value": null,
          "stdout": "",
          "stderr": "ML transpilation failed: ",
          "exit_code": 0,
          "execution_time": 0.009183406829833984,
          "memory_usage": 0,
          "cpu_usage": 0.0,
          "capability_violations": [],
          "security_warnings": [],
          "error": "ML transpilation failed: ",
          "error_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 194, in execute\n    python_code = self._transpile_ml_code(ml_code)\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 232, in _transpile_ml_code\n    raise SandboxError(f\"ML transpilation failed: {'; '.join(error_messages)}\")\nmlpy.runtime.sandbox.sandbox.SandboxError: ML transpilation failed: \n"
        },
        "stdout": "",
        "stderr": "ML transpilation failed: "
      },
      "error_message": null,
      "threat_count": 0
    },
    {
      "test_case": {
        "name": "language_coverage::control_flow",
        "file_path": "C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\language_coverage\\control_flow.ml",
        "category": "language_coverage",
        "expected_threats": 0,
        "should_transpile": true,
        "should_execute": true,
        "description": "Control flow structures test program (simplified ML syntax)"
      },
      "result": "TestResult.PASS",
      "execution_time_ms": 50.17828941345215,
      "security_analysis": {
        "pattern_matches": 0,
        "ast_violations": 0,
        "data_flow_violations": 0,
        "total_threats": 0,
        "analysis_time_ms": 2.3064613342285156
      },
      "transpilation_result": [
        "\"\"\"Generated Python code from mlpy ML transpiler.\"\"\"\n\n# This code was automatically generated from ML source\n# Modifications to this file may be lost on regeneration\n\ndef processNumber(n):\n    if (n > 10):\n        result = (n * 2)\n    else:\n        return result\n        return (n + 5)\n\ndef countUp(start):\n    i = start\n    while (i < 5):\n        i = (i + 1)\n    return i\n\nresult1 = processNumber(15)\n\nresult2 = processNumber(3)\n\ncount = countUp(0)\n\n# End of generated code",
        [],
        {
          "version": 3,
          "file": "generated.py",
          "sourceRoot": "",
          "sources": [
            "unknown.ml"
          ],
          "names": [],
          "mappings": "[]",
          "sourcesContent": [
            null
          ]
        }
      ],
      "execution_result": {
        "success": true,
        "result": {
          "success": false,
          "return_value": null,
          "stdout": "",
          "stderr": "ML transpilation failed: ",
          "exit_code": 0,
          "execution_time": 0.013402938842773438,
          "memory_usage": 0,
          "cpu_usage": 0.0,
          "capability_violations": [],
          "security_warnings": [],
          "error": "ML transpilation failed: ",
          "error_traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 194, in execute\n    python_code = self._transpile_ml_code(ml_code)\n  File \"C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\..\\..\\src\\mlpy\\runtime\\sandbox\\sandbox.py\", line 232, in _transpile_ml_code\n    raise SandboxError(f\"ML transpilation failed: {'; '.join(error_messages)}\")\nmlpy.runtime.sandbox.sandbox.SandboxError: ML transpilation failed: \n"
        },
        "stdout": "",
        "stderr": "ML transpilation failed: "
      },
      "error_message": null,
      "threat_count": 0
    },
    {
      "test_case": {
        "name": "language_coverage::functional_programming",
        "file_path": "C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\language_coverage\\functional_programming.ml",
        "category": "language_coverage",
        "expected_threats": 0,
        "should_transpile": true,
        "should_execute": true,
        "description": "Functional programming patterns test program (ML syntax)"
      },
      "result": "TestResult.FAIL",
      "execution_time_ms": 29.680967330932617,
      "security_analysis": {
        "pattern_matches": 0,
        "ast_violations": 0,
        "data_flow_violations": 0,
        "total_threats": 0,
        "analysis_time_ms": 4.25267219543457
      },
      "transpilation_result": [
        null,
        [],
        null
      ],
      "execution_result": null,
      "error_message": "Transpilation failed: 'NoneType' object has no attribute 'lower'",
      "threat_count": 0
    },
    {
      "test_case": {
        "name": "language_coverage::object_oriented",
        "file_path": "C:\\Users\\vogtt\\PyCharmProjects\\mlpy\\tests\\ml_integration\\language_coverage\\object_oriented.ml",
        "category": "language_coverage",
        "expected_threats": 0,
        "should_transpile": true,
        "should_execute": true,
        "description": "Object-style programming test program (ML syntax - no classes)"
      },
      "result": "TestResult.FAIL",
      "execution_time_ms": 13.900279998779297,
      "security_analysis": {
        "pattern_matches": 4,
        "ast_violations": 0,
        "data_flow_violations": 0,
        "total_threats": 4,
        "analysis_time_ms": 4.781484603881836
      },
      "transpilation_result": null,
      "execution_result": null,
      "error_message": "Unexpected threats detected in legitimate code: 4",
      "threat_count": 4
    }
  ]
}