Profiling enabled
Executing tests\ml_integration\ml_core\01_recursion_fibonacci.ml in sandbox...

    Sandbox Execution Results     
+--------------------------------+
| Property       | Value         |
|----------------+---------------|
| Success        | True          |
| Execution Time | 0.000 seconds |
+--------------------------------+

Standard Output:
+-----------------------------------------------------------------------------+
| __MLPY_RESULT__ {"success": true, "result": null, "type": null}             |
|                                                                             |
+-----------------------------------------------------------------------------+


=== PERFORMANCE PROFILING REPORTS ===

======================================================================
MLPY PERFORMANCE SUMMARY REPORT
======================================================================

Total Execution Time: 0.172s

Time Breakdown:
+---------------------+----------+----------+
| Category            | Time     | % Total  |
+---------------------+----------+----------+
| Python Stdlib       | 0.162s   |  94.6%   |
| ML Code Execution   | 0.009s   |   5.1%   |
| Sandbox Startup     | 0.000s   |   0.2%   |
| Transpilation       | 0.000s   |   0.1%   |
+---------------------+----------+----------+

ML Code Execution (by file):
+---------------------+----------+----------+--------+
| File                | Time     | % Total  | Calls  |
+---------------------+----------+----------+--------+
| _parser.py          | 0.005s |  56.2%   |  4,808 |
| _compiler.py        | 0.001s |  16.3%   |    420 |
| threading.py        | 0.001s |  10.6%   |    101 |
| subprocess.py       | 0.000s |   4.9%   |     40 |
| _local.py           | 0.000s |   3.2%   |    116 |
| tempfile.py         | 0.000s |   2.4%   |     16 |
| typing.py           | 0.000s |   1.2%   |     53 |
| __init__.py         | 0.000s |   1.1%   |     17 |
| contextlib.py       | 0.000s |   0.9%   |     19 |
| _abc.py             | 0.000s |   0.6%   |     12 |
+---------------------+----------+----------+--------+

Top Functions (by total time):
+--------------------------------------------+----------+--------+
| Function                                   | Time     | Calls  |
+--------------------------------------------+----------+--------+
| <method 'read' of '_io.TextIOWrapper' o... | 0.145s |      3 |
| <built-in method _winapi.CreateProcess>    | 0.006s |      1 |
| _parse (_parser.py)                        | 0.002s |     75 |
| <built-in method _io.open>                 | 0.001s |      4 |
| _compile (_compiler.py)                    | 0.001s |    144 |
| <method 'acquire' of '_thread.lock' obj... | 0.001s |     17 |
| <built-in method nt.mkdir>                 | 0.001s |      1 |
| __getitem__ (_parser.py)                   | 0.001s |  1,002 |
| _bootstrap_inner (threading.py)            | 0.000s |      3 |
| <built-in method nt.unlink>                | 0.000s |      2 |
| <method 'append' of 'list' objects>        | 0.000s |  1,907 |
| <built-in method builtins.len>             | 0.000s |  1,623 |
| <built-in method nt.stat>                  | 0.000s |      6 |
| __next (_parser.py)                        | 0.000s |  1,069 |
| <built-in method _winapi.WaitForSingleO... | 0.000s |      1 |
+--------------------------------------------+----------+--------+

======================================================================
MLPY INTERNAL PERFORMANCE ANALYSIS
======================================================================

Total mlpy Overhead: 0.000s (0.3% of total)

+--------------------------------------------------------------------+
| SANDBOX STARTUP (0.000s, 0.2%)                                      |
+--------------------------------------------------------------------+
|   _execute_python_code                               0.000s      1 |
|   <genexpr>                                          0.000s     92 |
|   _create_execution_script                           0.000s      1 |
|   _prepare_environment                               0.000s      1 |
|   parse_size                                         0.000s      3 |
|   _parse_resource_limits                             0.000s      1 |
|   _setup_sandbox                                     0.000s      1 |
|   __init__                                           0.000s      1 |
|   _parse_execution_result                            0.000s      1 |
|   set_limits                                         0.000s      1 |
+--------------------------------------------------------------------+

+--------------------------------------------------------------------+
| TRANSPILATION (0.000s, 0.1%)                                        |
+--------------------------------------------------------------------+
|   execute_with_sandbox                               0.000s      1 |
|   execute_ml_code_sandbox                            0.000s      1 |
+--------------------------------------------------------------------+

OPTIMIZATION RECOMMENDATIONS:

• User ML Code Execution: 5.1%
  - Most time is in mlpy overhead, not your code
  - Consider optimizing algorithm rather than reducing stdlib calls

• Overall Assessment:
  - Excellent! mlpy overhead is minimal (<20%)
