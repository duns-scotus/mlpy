Profiling enabled
Executing tests\ml_integration\ml_core\01_recursion_fibonacci.ml in sandbox...

    Sandbox Execution Results     
+--------------------------------+
| Property       | Value         |
|----------------+---------------|
| Success        | True          |
| Execution Time | 0.222 seconds |
+--------------------------------+

Standard Output:
+-----------------------------------------------------------------------------+
| __MLPY_RESULT__ {"success": true, "result": null, "type": null}             |
|                                                                             |
+-----------------------------------------------------------------------------+


=== PERFORMANCE PROFILING REPORTS ===

======================================================================
MLPY PERFORMANCE SUMMARY REPORT
======================================================================

Total Execution Time: 4.202s

Time Breakdown:
+---------------------+----------+----------+
| Category            | Time     | % Total  |
+---------------------+----------+----------+
| Python Stdlib       | 2.187s   |  52.0%   |
| Parsing             | 1.941s   |  46.2%   |
| ML Code Execution   | 0.071s   |   1.7%   |
| Transpilation       | 0.003s   |   0.1%   |
| Security Analysis   | 0.000s   |   0.0%   |
| Sandbox Startup     | 0.000s   |   0.0%   |
+---------------------+----------+----------+

ML Code Execution (by file):
+---------------------+----------+----------+--------+
| File                | Time     | % Total  | Calls  |
+---------------------+----------+----------+--------+
| _parser.py          | 0.039s |  54.8%   | 36,403 |
| _compiler.py        | 0.012s |  16.2%   |  2,907 |
| __init__.py         | 0.006s |   8.4%   |  5,374 |
| copy.py             | 0.004s |   5.5%   |  1,785 |
| threading.py        | 0.004s |   5.3%   |    101 |
| functools.py        | 0.003s |   3.8%   |    586 |
| enum.py             | 0.001s |   1.3%   |    628 |
| ast.py              | 0.001s |   1.3%   |    486 |
| typing.py           | 0.001s |   1.1%   |    439 |
| subprocess.py       | 0.001s |   0.8%   |     40 |
+---------------------+----------+----------+--------+

Top Functions (by total time):
+--------------------------------------------+----------+--------+
| Function                                   | Time     | Calls  |
+--------------------------------------------+----------+--------+
| compute_includes_lookback                  | 0.798s |      2 |
| __eq__                                     | 0.722s | 169,826 |
| __eq__                                     | 0.401s | 149,131 |
| <built-in method builtins.isinstance>      | 0.276s | 414,321 |
| compute_reads_relations                    | 0.230s |      2 |
| __ne__                                     | 0.223s | 121,174 |
| __hash__                                   | 0.169s | 254,734 |
| <built-in method builtins.hash>            | 0.166s | 278,863 |
| <method 'read' of '_io.TextIOWrapper' o... | 0.166s |      3 |
| compute_lookaheads                         | 0.134s |      2 |
| <method 'add' of 'set' objects>            | 0.092s | 89,201 |
| traverse                                   | 0.059s |  3,172 |
| <built-in method builtins.len>             | 0.043s | 84,333 |
| __hash__                                   | 0.040s | 110,449 |
| feed_token                                 | 0.038s |  1,932 |
+--------------------------------------------+----------+--------+

======================================================================
MLPY INTERNAL PERFORMANCE ANALYSIS
======================================================================

Total mlpy Overhead: 1.944s (46.3% of total)

+--------------------------------------------------------------------+
| SANDBOX STARTUP (0.000s, 0.0%)                                      |
+--------------------------------------------------------------------+
|   _execute_python_code                               0.000s      1 |
|   execute                                            0.000s      1 |
|   _prepare_environment                               0.000s      1 |
|   _create_execution_script                           0.000s      1 |
|   <genexpr>                                          0.000s     92 |
|   parse_size                                         0.000s      3 |
|   _parse_resource_limits                             0.000s      1 |
|   _transpile_ml_code                                 0.000s      1 |
|   _setup_sandbox                                     0.000s      1 |
|   _parse_execution_result                            0.000s      1 |
+--------------------------------------------------------------------+

+--------------------------------------------------------------------+
| PARSING (1.941s, 46.2%)                                             |
+--------------------------------------------------------------------+
|   compute_includes_lookback                          0.798s      2 |
|   __eq__                                             0.401s 149,131 |
|   compute_reads_relations                            0.230s      2 |
|   compute_lookaheads                                 0.134s      2 |
|   traverse                                           0.059s  3,172 |
|   feed_token                                         0.038s  1,932 |
|   calculate_sets                                     0.037s      2 |
|   step                                               0.033s  3,224 |
|   _expand_rule                                       0.023s  5,398 |
|   is_satisfied                                       0.023s 20,462 |
+--------------------------------------------------------------------+

+--------------------------------------------------------------------+
| SECURITY ANALYSIS (0.000s, 0.0%)                                    |
+--------------------------------------------------------------------+
|   visit_binary_expression                            0.000s     56 |
|   visit_function_call                                0.000s     52 |
|   visit_function_definition                          0.000s     18 |
|   visit_if_statement                                 0.000s     14 |
|   visit_assignment_statement                         0.000s     58 |
|   visit_block_statement                              0.000s     30 |
|   visit_return_statement                             0.000s     34 |
|   visit_number_literal                               0.000s     94 |
|   visit_identifier                                   0.000s     92 |
|   __init__                                           0.000s      2 |
+--------------------------------------------------------------------+

+--------------------------------------------------------------------+
| TRANSPILATION (0.003s, 0.1%)                                        |
+--------------------------------------------------------------------+
|   _generate_expression                               0.001s    330 |
|   _safe_identifier                                   0.000s    244 |
|   visit_function_definition                          0.000s     18 |
|   visit_assignment_statement                         0.000s     58 |
|   _emit_line                                         0.000s    152 |
|   _generate_direct_call                              0.000s     52 |
|   execute_ml_code_sandbox                            0.000s      1 |
|   visit_if_statement                                 0.000s     14 |
|   _discover_ml_builtins                              0.000s      1 |
|   _generate_assignment_target                        0.000s     34 |
+--------------------------------------------------------------------+

OPTIMIZATION RECOMMENDATIONS:

• User ML Code Execution: 1.7%
  - Most time is in mlpy overhead, not your code
  - Consider optimizing algorithm rather than reducing stdlib calls

• Overall Assessment:
  - mlpy overhead is significant (>30%)
  - This is normal for I/O heavy or stdlib-intensive programs
