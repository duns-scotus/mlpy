name: Documentation Build and Validation

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'docs/**'
      - 'src/**'
      - '.github/workflows/docs.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'src/**'

jobs:
  validate-examples:
    name: Validate Documentation Examples
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11, 3.12]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-cov

    - name: Install documentation dependencies
      run: |
        pip install sphinx sphinx_rtd_theme myst-parser
        pip install pygments

    - name: Validate ML examples
      run: |
        cd docs/examples
        python test_runner.py --verbose
      env:
        PYTHONPATH: ${{ github.workspace }}/src

    - name: Check example syntax
      run: |
        # Validate all ML files have valid syntax
        find docs/examples -name "*.ml" -exec python -m mlpy.ml.parser {} \;

  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: validate-examples

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install sphinx sphinx_rtd_theme myst-parser pygments

    - name: Build documentation
      run: |
        cd docs
        make html
      env:
        PYTHONPATH: ${{ github.workspace }}/src

    - name: Check documentation links
      run: |
        cd docs
        make linkcheck

    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v3
      with:
        name: documentation-html
        path: docs/build/html/

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: build-docs
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install sphinx sphinx_rtd_theme myst-parser pygments

    - name: Build documentation
      run: |
        cd docs
        make html

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/build/html
        cname: docs.mlpy.dev

  security-scan:
    name: Security Scan Documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install bandit safety

    - name: Run security analysis on examples
      run: |
        # Scan Python integration examples
        find docs/examples -name "*.py" -exec bandit {} \;

    - name: Check for vulnerabilities in dependencies
      run: |
        safety check

    - name: Run ML security analysis on examples
      run: |
        # Run ML security analysis on all examples
        find docs/examples -name "*.ml" -exec python -m mlpy.ml.analysis.parallel_analyzer {} \;